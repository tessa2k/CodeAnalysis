=== Following is the header of samples/234101/Danner-et-al-2017/create_noise_diags.m ===
function [  ] = create_noise_diags(sim,alpha, dontrun)
% Calculates distribution of phase differences when strong noise is applied
% to the model. Phase differences are then categorized them into three 
% equally sized bins (cf. Figure 7).
% Tse argument sim to specify which model shall be simulated
%       1: intact
%       2: all V0V ablated
%       3: diagonal V0V ablated
%       4: all V0V and V0D ablated
%       5: descending LPNs ablated
% alpha specifies the alpha value.
% 
% Examples
% Figure 7C:
% create_noise_diags(1,0.3)
% create_noise_diags(5,0.3)
% Figure 7D:
% create_noise_diags(1,0.6)
% create_noise_diags(5,0.6)
% Figure 7E:
% create_noise_diags(1,0.75)
% create_noise_diags(5,0.75)
% 
executable = './icpg'; % this needs to point to the executable
filename = './models/Danner-etal-eLife-noise.txt';

if ~exist('sim','var')
    sim = 1; % if not otherwise specified simulate the intact model
end
switch sim
    case 1
        % Simulate intact model
        argument = '';
    case 2
        % Simulate ablation of all V0V
        argument = ' -u V0VtoRGFdiagfh 0.0 -u V0VtoRGFdiaghf 0.0 -u inV0VtoRGF 0.0';
    case 3
        % Simulate ablation of only diagonal V0V
        argument = ' -u V0VtoRGFdiagfh 0.0 -u V0VtoRGFdiaghf 0.0';
    case 4


=== Following is the header of samples/234101/Danner-et-al-2017/models/Danner-etal-eLife.txt ===
N_NaP 8
N_Normal 48
simDuration 92000
scalingFactor 15
stepwise 50 10000 0.02 1.05

neuron 0: RGF_NaP_L_hind
neuron 1: RGF_NaP_R_hind
neuron 2: RGE_NaP_L_hind
neuron 3: RGE_NaP_R_hind
neuron 4: RGF_NaP_L_front
neuron 5: RGF_NaP_R_front
neuron 6: RGE_NaP_L_front
neuron 7: RGE_NaP_R_front
neuron 8: InF_L_hind
neuron 9: InF_R_hind
neuron 10: InE_L_hind
neuron 11: InE_R_hind
neuron 12: V0D_L_hind
neuron 13: V0D_R_hind
neuron 14: V3_L_hind
neuron 15: V3_R_hind
neuron 16: V0V_L_hind
neuron 17: V0V_R_hind
neuron 18: InV0V_L_hind
neuron 19: InV0V_R_hind
neuron 20: InF_L_front
neuron 21: InF_R_front
neuron 22: InE_L_front
neuron 23: InE_R_front
neuron 24: V0D_L_front
neuron 25: V0D_R_front
neuron 26: V3_L_front
neuron 27: V3_R_front
neuron 28: V0V_L_front
neuron 29: V0V_R_front
neuron 30: InV0V_L_front
neuron 31: InV0V_R_front
neuron 32: InFront_L
neuron 33: InFront_R


=== Following is the header of samples/234101/Danner-et-al-2017/models/Danner-etal-eLife-noise.txt ===
N_NaP 8
N_Normal 48
simDuration 92000
scalingFactor 15
stepwise 200 1000 0.02 1.05

neuron 0: RGF_NaP_L_hind
neuron 1: RGF_NaP_R_hind
neuron 2: RGE_NaP_L_hind
neuron 3: RGE_NaP_R_hind
neuron 4: RGF_NaP_L_front
neuron 5: RGF_NaP_R_front
neuron 6: RGE_NaP_L_front
neuron 7: RGE_NaP_R_front
neuron 8: InF_L_hind
neuron 9: InF_R_hind
neuron 10: InE_L_hind
neuron 11: InE_R_hind
neuron 12: V0D_L_hind
neuron 13: V0D_R_hind
neuron 14: V3_L_hind
neuron 15: V3_R_hind
neuron 16: V0V_L_hind
neuron 17: V0V_R_hind
neuron 18: InV0V_L_hind
neuron 19: InV0V_R_hind
neuron 20: InF_L_front
neuron 21: InF_R_front
neuron 22: InE_L_front
neuron 23: InE_R_front
neuron 24: V0D_L_front
neuron 25: V0D_R_front
neuron 26: V3_L_front
neuron 27: V3_R_front
neuron 28: V0V_L_front
neuron 29: V0V_R_front
neuron 30: InV0V_L_front
neuron 31: InV0V_R_front
neuron 32: InFront_L
neuron 33: InFront_R


=== Following is the header of samples/234101/Danner-et-al-2017/readme.txt ===
Simulation software and model files used in 
Danner SM, Shevtsova NA, Frigon A, Rybak IA. Computational modeling of spinal circuits controlling limb coordination and gaits in quadrupeds. eLife 2017;6:e31050.



Source code needs to be compiled with c++11 extensions turned on. 
Boost header files need to be located in the header search paths.
libnetcdf_c++4 needs to be linked.
A makefile is supplied. Software was tested on macOS 10.13.1, Cygwin on Windows 10, and Ubuntu 16.04.

Files in directory 'models' specify the network structure and all parameters of the model.

usage: executable -f config_file [-o output_file] [-u name value] [-a alpha]
                                 [-U varname tstep value1 value2 [tstep2] [-V varname]]
 -f config_file: text file specifying the neural network model
 -o output_file: the path where the simulationresults should be written to. The file will
                  be written in CDF-4 file format.
 -u name value:  updates a variable (name) specified in the config_file to the value given
 -a alpha: sets alpha to a constant value (overrides the configuration file)
 -U varname tstep value1 value2 [tstep2]: sets variable varname to value1 and changes
                  it to value2 at time tstep, if tstep2 is specified, the variable will be
                  changed back to value1 at time tstep2
 -V varname: adds an additional variable to the update process of -U (has no effect if -U
                  is not specified.

Output will be written as a netcdf file that can be open natively with matlab or using the netcdf library in various languages. It contains a single matrix (under /data) first column is the time, all other columns are V of the neurons (same sequence as in model file) followed by the h parameter of the NaP current.

Three Matlab scripts are provided that perform simulations presented in the paper and plot the appropriate figures.

create_bfdiag.m  -  bifurcation diagrams
create_noise_diags.m - simulations with increased noise
dynamicDriveChange.m - simulations with abrupt drive changes

Usage of the scripts is described in more detail in the comments within the files.

=== Following is the header of samples/234101/Danner-et-al-2017/dynamicDriveChange.m ===
function dynamicDriveChange(alpha,varnames,from,to,tstep2)
% runs simulation for tstep ms and the changes variables varnames from
% value from to value to. If tstep2 is provided the value will be set back
% to the original one at tstep2. If varnamse is 'alpha' alpha will be
% changed.
% This script allows recration of the simulation in Figure 8. 
% here are some examples:
% Figure 8A dynamicDriveChange(0.02,{'alpha'},0.02,0.4)
% Figure 8B dynamicDriveChange(0.02,{'alpha'},0.85,0.6)
% Figure 8C dynamicDriveChange(0.02,{'alpha'},0.02,0.9,10500)
% Figure 8G dynamicDriveChange(0.5,{'V0Vlrdrive_off','V0Vfhdrive_off'},0,2)

executable = './icpg';
filename = './models/Danner-etal-eLife.txt';

tstep=10000;
if iscell(varnames)
    varname = varnames{1};
else
    varname = varnames;
end
varnamestr=varname;

if ~exist('dontrun','var')
    call=[executable, ' -f ', strrep(filename,' ','\ '), ' -a ', num2str(alpha), ' -U ' , varname,  ' ', num2str(tstep), ' ', num2str(from), ' ', num2str(to)];
    if exist('tstep2','var')
        call=[call, ' ', num2str(tstep2)];
        
    end
    if iscell(varnames)&&length(varnames)>1
        for i=2:length(varnames)
            call=[call, ' -V ', varnames{i}];
            varnamestr=[varnamestr, ' ', varnames{i}];
        end
    end
    system(call);
end
xn=h5read('./results/example.cdf','/data');
x=xn';
Vmin=-50;


=== Following is the header of samples/234101/Danner-et-al-2017/create_bfdiag.m ===
function [  ] = create_bfdiag(sim, dontrun)
% runs network simulation and plots bifurcation diagrams for all phase-
% differences, phase durations and frequency.
% use argument sim to specify which model shall be simulated
%       1: intact
%       2: all V0V ablated
%       3: diagonal V0V ablated
%       4: all V0V and V0D ablated
%       5: descending LPNs ablated
%
% Note: Simulations are by default run alpha being increased and then
% decreased in 50 equally spaced steps. This is done to keep simulation
% time low, but does not correspond to the figures in the paper. To create
% the same simulation as in the paper, the number 50 after stepwise on line
% 5 in Danner-etal-eLife.txt needs to be replaced by 500.

executable = './icpg';
filename = './models/Danner-etal-eLife.txt';

if ~exist('sim','var')
    sim = 1; % if not otherwise specified simulate the intact model
end
switch sim
    case 1
        % Simulate intact model
        argument = '';
    case 2
        % Simulate ablation of all V0V
        argument = ' -u V0VtoRGFdiagfh 0.0 -u V0VtoRGFdiaghf 0.0 -u inV0VtoRGF 0.0';
    case 3
        % Simulate ablation of only diagonal V0V
        argument = ' -u V0VtoRGFdiagfh 0.0 -u V0VtoRGFdiaghf 0.0';
    case 4
        % Simulate ablation of all V0V and V0D neurons
        argument = ' -u V0VtoRGFdiagfh 0.0 -u V0VtoRGFdiaghf 0.0 -u inV0VtoRGF 0.0 -u V0DtoRGFdiagfh 0.0 -u V0DtoRGF 0.0';
    case 5
        % Simulate ablation of all descending LPNs
        argument = ' -u V0VtoRGFdiagfh 0.0 -u V0DtoRGFdiagfh 0.0 -u inFH 0.0 -u V2aHomfh 0.0';
    otherwise
        argument = '';


=== Following is the header of samples/234101/Danner-et-al-2017/src/Network.cpp ===
// Simulation software used in Danner SM, Shevtsova NA, Frigon A, Rybak IA.
// Long propriospinal neurons and gait expression in quadrupeds. eLife. submitted
// and Danner SM, Wilshin SD, Shevtsova NA, Rybak IA. Central control of interlimb
// coordination and speed-dependent gait expression in quadrupeds. J Physiol. 2016;
// 594(23):6947-6967.
//
// Network.cpp
//
#include "Network.h"
#include <iostream>

// Geline compatible with Unix and Windows
std::istream& safeGetline(std::istream& is, std::string& t)
{
    //from http://stackoverflow.com/questions/6089231/getting-std-ifstream-to-handle-lf-cr-and-crlf
    t.clear();
    
    std::istream::sentry se(is, true);
    std::streambuf* sb = is.rdbuf();
    for(;;) {
        int c = sb->sbumpc();
        switch (c) {
            case '\n':
                return is;
            case '\r':
                if(sb->sgetc() == '\n')
                    sb->sbumpc();
                return is;
            case EOF:
                if(t.empty())
                    is.setstate(std::ios::eofbit);
                return is;
            default:
                t += (char)c;
        }
    }
}

// definition of sech function
inline double sech(double z){return 2/(exp(z)+exp(-z));};


=== Following is the header of samples/234101/Danner-et-al-2017/src/Network.h ===
// Simulation software used in Danner SM, Shevtsova NA, Frigon A, Rybak IA.
// Long propriospinal neurons and gait expression in quadrupeds. eLife. submitted
// and Danner SM, Wilshin SD, Shevtsova NA, Rybak IA. Central control of interlimb
// coordination and speed-dependent gait expression in quadrupeds. J Physiol. 2016;
// 594(23):6947-6967.
//
// Network.h
//
#ifndef __iCPG__Network__
#define __iCPG__Network__

#include <stdio.h>
#include <list>
#include <fstream>
#include <string>
#include <map>
#include <chrono>
#include <random>
#include <netcdf>

#include <boost/numeric/odeint.hpp>
#include <boost/numeric/ublas/storage.hpp>

#include <boost/numeric/ublas/vector.hpp>
#include <boost/numeric/ublas/io.hpp>

#include <boost/algorithm/string.hpp>

#include <ctime>
#include <algorithm>

#include <math.h>

using namespace boost::numeric::odeint;
using namespace boost::numeric::ublas;

// default paramter values
const double c_gBarLeak = 2.8;
const double c_gBarNaP = 5.0;
const double c_ELeak = -60.0;


=== Following is the header of samples/234101/Danner-et-al-2017/src/main.cpp ===
// Simulation software used in Danner SM, Shevtsova NA, Frigon A, Rybak IA.
// Long propriospinal neurons and gait expression in quadrupeds. eLife. submitted
// and Danner SM, Wilshin SD, Shevtsova NA, Rybak IA. Central control of interlimb
// coordination and speed-dependent gait expression in quadrupeds. J Physiol. 2016;
// 594(23):6947-6967.
//
// usage: executable -f config_file [-o output_file] [-u name value] [-a alpha]
//                                  [-U varname tstep value1 value2 [tstep2] [-V varname]]
// -f config_file: text file specifying the neural network model
// -o output_file: the path where the simulationresults should be written to. The file will
//                  be written in CDF-4 file format.
// -u name value:  updates a variable (name) specified in the config_file to the value given
// -a alpha: sets alpha to a constant value (overrides the configuration file)
// -U varname tstep value1 value2 [tstep2]: sets variable varname to value1 and changes
//                  it to value2 at time tstep, if tstep2 is specified, the variable will be
//                  changed back to value1 at time tstep2
// -V varname: adds an additional variable to the update process of -U (has no effect if -U
//                  is not specified.
#include "Network.h"
#include <fstream>
#include <string>

int main(int argc, char **argv)
{
    // if no output filename is specified with [-o filename], ./results/example.cdf will be used
    std::string ofilename = "./results/example.cdf";
    time_t tstart, tend;
    tstart = time(0);
    Network *network;
    bool varyVars=false;
    std::vector<std::string> varnames;
    double tstep = 0.0;
    double valuefirst = 0.0;
    double valuesecond = 0.0;
    double tstep2 = 999999999.0;
    if (std::string(argv[1])=="-f" && argc >=3){
        network=new Network(std::string(argv[2]));
        if(network->N_Neurons!=-1){
            
            Simulator sim = Simulator(network);


