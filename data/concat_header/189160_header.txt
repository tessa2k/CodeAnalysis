=== Following is the header of samples/189160/HassEtAl2016/IDNet/names.m ===
function [Cm,gL,EL,sf,Vup,tcw,a,b,Vr,Vth]=names(para)
% Assign meaningful names to all parameters
%
% INPUT:
%   para:   Vector of parameters
% 
% OUTPUT:
%   Cm:     Membrane capacity
%   gL:     Leak conductance
%   EL:     Lead reversal potential
%   sf:     Slope factor of the exponential part
%   Vup:    Maximal membrane potential (hard threshold)
%   tcw:    Adaptation time constant
%   a:      Continuous adaptation parameter 
%   b:      Spike-triggered adaptation parameter
%   Vr:     Reversal potential
%   Vth:    Threshold potential (soft threshold - exponential term sets in)


    Cm=para(1);
    gL=para(2);
    EL=para(3);
    sf=para(4);
    Vup=para(5);
    tcw=para(6);
    a=para(7);
    b=para(8);
    Vr=para(9);
    Vth=para(10);
    
    
% (c) 2016 J. Hass, L. Hertaeg and D. Durstewitz,
% Central Institute of Mental Health, Mannheim University of Heidelberg 
% and BCCN Heidelberg-Mannheim


=== Following is the header of samples/189160/HassEtAl2016/IDNet/rand_par.m ===
function par = rand_par(N, par_mean, par_std, par_min, par_max, distr_flag)
% Returns N random parameters. If a drawn parameter falls outside the 
% interval [par_min par_max], it is replaced by a random variable drawn 
% from a uniform distribution spanning that interval. % If par_std = 0 and 
% par_max = 0, all parameters are set to par_mean.

% 
% INPUT:
%   N:          Number of random parameters
%   par_mean:   Parameter mean
%   par_std:    Parameter standard deviation
%   par_min:    Parameter minimum
%   par_max:    Parameter maximum
%   distr_flag: Specifies the distribution used for the random draw:
%                   0: Gaussian distribution
%                   1: uniform distribution over interval [par_min par_max]
%                   2: log-normal distribution
% 
% OUTPUT:
%   par:        Vector of random parameters


if par_std==0
    if par_max==0
        par = par_mean*ones(1,N);                   % constant parameters with std and par_max == 0
    else
        par = par_min+(par_max-par_min)*rand(1,N);  % uniform distribution if std==0, but par_max !=0
    end;
else
    switch distr_flag                               % choose distribution according to distr_flag
        case 0
            par = par_mean + par_std*randn(1,N);
            exc_ind = find(par<par_min | par>par_max);
            par(exc_ind) =  par_min+(par_max-par_min)*rand(1,length(exc_ind));
        case 1
            par = par_min+(par_max-par_min)*rand(1,N);
        case 2
            par = exp(randn(N,1) .* par_std + par_mean);
            exc_ind = find(par<par_min | par>par_max);
            par(exc_ind) =  par_min+(par_max-par_min)*rand(1,length(exc_ind));            


=== Following is the header of samples/189160/HassEtAl2016/IDNet/Define_I_ref.m ===
function q=Define_I_ref(I0,Par)
% Objective function that needs to be minimized to compute the current I
% above which the cell does not react any more (depolarization block)
%
% INPUT:
%    I0:    Current in pA
%    Par:   Model parameters
%
% OUTPUT
%    q:     The value of the objective function

    re=FRsimpAdEx(Par,I0,0,[],[]);
    q = (re-200).^2;

end


% (c) 2016 J. Hass, L. Hertaeg and D. Durstewitz,
% Central Institute of Mental Health, Mannheim University of Heidelberg 
% and BCCN Heidelberg-Mannheim


=== Following is the header of samples/189160/HassEtAl2016/IDNet/IDNetSim.m ===
function [STMtx,T,V,dV,Ninp]=IDNetSim(SimPar,ConMtx)
% MATLAB wrapper for C program IDNet.c to simulate abritrary biological
% neural networks. The neuron and synapse models are specified in IDNet.c,
% the parameters SimPar in ConfigIDNet.
%
% INPUT:
%   SimPar: A set of parameters (neurons, synapses, control parameters)
%   ConMtx (optionally): A network structure (random connectivity specified 
%                        in SimPar is used if this is empty).
% 
% OUTPUT:
%   STMtx: Cell array of spike times t_sp. Each cell contains t_sp of one
%          neuron
%   T:     Vector of simulation time steps for visualizing voltage traces
%   V:     Cell array of voltage traces for each neuron in the viewlist
%   Ninp:  Number of simulated neurons



% ------------------ Read parameters from SimPar --------------------------

CtrPar = SimPar.CtrPar;                             % control parameters

Nstripes = SimPar.Nstripes;                         % number of stripes
NTypes = SimPar.NTypes;                             % number of neurons of each type
InpNTypes = SimPar.InpNTypes;                       % number of input neurons of each type

CellPar = SimPar.CellPar;                           % (mean) neuron parameters
k_trans = SimPar.k_trans;                           % parameter for inv_transform_distribution
ParCov = SimPar.ParCov;                             % Cell-Array with 14 covariation matrices
N_sig = SimPar.N_sig;                               % SDs of neuron parameters
N_max = SimPar.N_max;                               % maxima of neuron parameters
N_min = SimPar.N_min;                               % minima of neuron parameters

NPList = SimPar.NPList;                             % type of each neuron

STypPar = SimPar.STypPar;                           % synapse parameters

ConPar= SimPar.ConPar;                              % (mean) connection parameters (weights etc.)
pCon = SimPar.pCon;                                 % connectivity (for random networks)


=== Following is the header of samples/189160/HassEtAl2016/IDNet/update_inv_con_PSP.m ===
function [par_E, par_I23, par_I5, res_E, res_I23, res_I5] = update_inv_con_PSP(gmax)
% update the connections strengths that lead to a defined PSP
% amplitude, using a range of gmax values (optional input)
%
% INPUT:
%   gmax: Peak conductances to be tested (vector)
% 
% OUTPUT:
%   p_X:   Parameters of the linear fit to the gmax/PSP function 
%          (X=E: excitatory input, X=I23: inhibitory input, L2/3, X=L5:
%          inhibitory input, L5)
%   res_X: gmax and PSP values, X as above


% Set test parameter set with only one neuron
SimParTest = ConfigIDNet(14,1,1,1000,0,[1.0 1.0],[1.0 1.0]);                   % only one neuron per type

SimParTest.EvtMtx = zeros(17,1);                    % input only to three neurons (pyramidal cell and interneuon in both layers)
SimParTest.EvtMtx(1,1) = 58.5;
SimParTest.EvtMtx(4,1) = 31.5;
SimParTest.EvtMtx(12,1) = 31.5;
SimParTest.EvtTimes = [SimParTest.CtrPar(3); SimParTest.CtrPar(2)];

SimParTest.N_sig = zeros(size(SimParTest.N_sig));   % no variation in parameters
SimParTest.N_min = SimParTest.CellPar;
SimParTest.N_max = zeros(size(SimParTest.N_max));
SimParTest.S_sig = zeros(size(SimParTest.S_sig));
SimParTest.S_max = zeros(size(SimParTest.S_max));


% Default values of gmax
if ~exist('gmax','var')
    gmax = 0:0.25:2;
end;

% Generate PSP data for all values of gmax (excitatory input)
SimParTest.ViewList = [2:3 5:11 13:17];                          % watch all neurons except the spiking ones
for i=1:length(gmax)
    for j=1:14
        SimParTest.ConPar{2}{j,1}{3}(1) = gmax(i);               % input strength


=== Following is the header of samples/189160/HassEtAl2016/IDNet/SetCon_CommonNeighbour_Recur.m ===
function [X_out,idc,p_out,recip] = SetCon_CommonNeighbour_Recur(Nsyn, Nin, Nout, pCon, pSelfCon, pRec, set_flag, X)
% Generates a random connectivity matrix X[Nout, Nin] with
% connection prob. pCon and implements the "common neighbour rule"
% (Perin et al. 2011, PNAS). 
%
% INPUT:
%   Nsyn:           Number of synapses that are already created
%   Nin:            Number of input neurons
%   Nout:           Number of output neurons
%   pCon:           Connection probability
%   pSelfCon        Connection probability for self-connections (autapses)
%   pRec            Fraction of reciprocal (bidirectional) connections
%   set_flag:       Change connection matrix according to the common
%                   neighbour rule if set_flag==TRUE
%   X:              Connection matrix between the input and output neurons
% 
% OUTPUT:
%   X_out:          Connection matrix containing idc at non-zero entries
%   idc:            Synapse indices (starting with Nsyn)
%   p_res:          Connection probability as a function of the number of
%                   common neighbours
%   recip           Actual fraction of reciprocal connections



% Set probabilities according to the number of neighbours 
% (derived from Perin et al. 2011) 
slope = 20*3.9991/Nout;
max_neigh = min(Nout,floor(1/pCon/slope));
if max_neigh==0
    disp('Warning: max_neigh=0 => CNR not applicable!');
end

% Set random connectivity with probability pCon (if not preset)
if ~exist('X', 'var')
    k1 = randperm(Nin*Nout);
    k = k1(1:round(pCon*Nin*Nout));
    X=zeros(Nin,Nout);
    idc=Nsyn+(1:length(k));
    X(k)=idc;


=== Following is the header of samples/189160/HassEtAl2016/IDNet/ConfigIDNet.m ===
function SimPar = ConfigIDNet(N1,IN1,Nstripes,RunTime,I,s,p,RState,UniqueNum)
% sets all simulation parameters for IDNetSim.m, except for the (optional)
% connectivity matrix 
%
% INPUT:
% N1:           Number of simulated neurons
% M1:           Number of input neurons (prescribed spike trains)
% Nstripes:     Number of columns/stripes
% RunTime:      Simulation time in ms
% I:            Background input (1x14 vector, one entry for each neuron type)
% s:            Scaling factors for synaptic weights (1x4 vector)
% p:            Scaling factors for synaptic connectvity (1x4 vector)
% RState:       State for Random number generation, optional (pass for reproduction of random numbers)
% UniqueNum:    Unique number to differentiate several simulations running in parallel, optional

% OUTPUT:
% SimPar:       Simulation parameters (structure)


% ------------------------ Set meta data ----------------------------------
SimPar.name = 'PFC';
SimPar.comment = 'Data-based PFC-like circuit with layer 2/3 and 5, synaptic clustering, four types of interneurons and cell-type specific short-term synaptic plasticity; neuron parameters fitted to in vitro data, all other parameters constrained by experimental literature.';
SimPar.ver = '';                                % version number of the code to be used with this parameter set

% ------------------------ Set control parameters -------------------------
if ~exist('RunTime', 'var')
    RunTime = 1000;
end;
CtrPar = [0;                % starting time
          RunTime;          % stopping time
          0.05;             % time step
          2;                % # variables to save for viewlist neurons
          1]';              % record spike times?     
      
SimPar.fnOut = 'PFC_all';          % file name to save simulation details

% ---------------- Set random seed and random state, if needed ------------
if RandStream.getGlobalStream.Seed == 0
    RandStream.setGlobalStream(RandStream('mt19937ar','seed',sum(100*clock)));
end;


=== Following is the header of samples/189160/HassEtAl2016/IDNet/FRsimpAdEx.m ===
function fr=FRsimpAdEx(values,I,w0,V0,bmin)
% computes the firing rate of the simpAdEx for a given constant current I

% INPUT:
% * values:     vector containg the model parameters
% * I:          constant current step in pA
% * w0:         initial w-value; if w0 is empty, the steady-state  value 
%               (wr) is used
% * V0:         initial V-value; if V0 is empty, the steady-state value 
%               (Vr) is used
% * bmin:       lower bound for the model parameter b 

% OUTPUT:
% * fr:         firing rate in Hz


    % define parameters and values
    warning off;
    [Cm,gL,EL,sf,Vup,tcw,~,b,Vr,Vth]=names(values);

    tau=Cm/gL;
    f=tau/tcw;
    X_Vth=f*(I+gL*sf-gL*(Vth-EL));                  
    w_end=-gL*(Vth-EL)+gL*sf+I-X_Vth;
    if isempty(w0)
        if b~=0
            w_r=w_end+b;
        else
            w_r=0;
        end
    else
        w_r=w0;
    end
    if (isempty(bmin) || bmin<0)
        bmin=0;
    end
    if isempty(V0)
        V_r=Vr;
    else
        V_r=V0;


=== Following is the header of samples/189160/HassEtAl2016/IDNet/inv_con_PSP.m ===
function gmax = inv_con_PSP(PSP,i,j)
% Implements linear transformation from a desired maximal PSP value to a peak
% conductance, according to the data in inv_con_par, depending on input and
% output neuron type

% scaling factors for all target neuron types
par_E = [1.0569    0.5875    0.6587    0.7567    0.6728    0.9899    0.6294    1.6596    0.5941    0.6661    0.7647    0.6799    1.5818    0.6360];
par_I = [2.3859    1.6277    1.6277    1.6671    1.6671    2.3142    1.4363    3.5816    1.6277    1.6277    1.6671    1.6671    3.4016    1.4363];
% par_E = ones(1,14);  % replace the former two lines with these ones before using update_inv_con_PSP
% par_I = ones(1,14);


if any(ismember([1 8 15],j))       % use par_E if input is excitatory
    gmax = PSP*par_E(i);
else                               % use par_I if input is inhibitory
    gmax = PSP*par_I(i); 
end;


=== Following is the header of samples/189160/HassEtAl2016/IDNet/IDNet.c ===
/*  IDNet.c
MEX function written in C to simulate arbitrary biological neural networks
To be used with the MATLAB wrapper IDNetSim.m
 
*/

/* -------------------------------------------------------------------------------------------------- */
/* ----------------------- Declarations and definitions --------------------------------------------- */
/* -------------------------------------------------------------------------------------------------- */

/* Include libaries */
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stddef.h>
#include <math.h>
#include "mex.h"

/* Define global parameters */
#define pi 3.14159265418
#define MaxNumSTperN 20
#define SizeHistOutput 10       /* Sets the number spikes that are considered to modify EPSPs */
#define SizeHistInput 1000000   /* Sets the number of possible spikes in the input neurons */
#define NumCtrPar 5
#define NumVar 2                
#define NumNeuPar 12
#define NumSynTypePar 8
#define NumSynPar 7
#define TRUE 1
#define FALSE 0

/* declare data structures */
struct SynType 
{
    /* parameters */
    int No;
    double gmax;
    double tc_on;


=== Following is the header of samples/189160/HassEtAl2016/IDNet/inv_transform_distribution2.m ===
function X_inv=inv_transform_distribution2(X_trans,k,mean_X,std_X,min_X)
% inverts the transformation made in transform_distribution
% using the moments of the original distribution
%
% INPUT:
%   X_trans:    Sample from the transformed distribution
%   k:          Box-Cox exponent
%   mean_X:     Mean of the transformed distribution
%   std_X:      Standard deviation of the transformed distribution
%   min_X:      Minimum of the transformed distribution
% 
% OUTPUT:
%   X_inv:      Sample from the inverted distribution


std_decr = 0.8;

if k>0
    if min_X<0
        X_inv = (mean_X+std_decr*std_X*X_trans).^(1/k)+1.1*min_X;
    else
        X_inv = (mean_X+std_decr*std_X*X_trans).^(1/k);
    end
else
    if min_X<0
        X_inv = exp(mean_X+std_decr*std_X*X_trans)+1.1*min_X;
    else
        X_inv = exp(mean_X+std_decr*std_X*X_trans);
    end
end


% (c) 2016 J. Hass, L. Hertaeg and D. Durstewitz,
% Central Institute of Mental Health, Mannheim University of Heidelberg 
% and BCCN Heidelberg-Mannheim


=== Following is the header of samples/189160/HassEtAl2016/IDNet/SetCon_CommonNeighbour_Cross.m ===
function [X_out,idc,p_res] = SetCon_CommonNeighbour_Cross(Nsyn, X_11,X_22,pCon,para_p_input,para_p_output,set_flag,X)
% Generates a random connectivity matrix X[Nout, Nin] across two different
% neuron populations with connection probabilities pCon and implements the 
% "common neighbour rule" (Perin et al. 2011, PNAS). 
%
% INPUT:
%   Nsyn:           Number of synapses that are already created
%   X11:            Connection matrix within the output neurons
%   X22:            Connection matrix within the input neurons
%   pCon:           Connection probability
%   para_p_input:   Common neighbour rule parameters for the input neurons
%   para_p_output:  Common neighbour rule parameters for the output neurons
%   set_flag:       Change connection matrix according to the common
%                   neighbour rule if set_flag==TRUE
%   X:              Connection matrix between the input and output neurons
% 
% OUTPUT:
%   X_out:          Connection matrix containing idc at non-zero entries
%   idc:            Synapse indices (starting with Nsyn)
%   p_res:          Connection probability as a function of the number of
%                   common neighbours


Nin = length(X_22(1,:));   
Nout = length(X_11(:,1));

% Set probabilities according to the number of neighbours 
% (derived from Kampa, Letzkus and Stuart, 2006) 
if ~exist('para_p_input', 'var') || isempty(para_p_input')
    para_p_input = [0.1411   0.1677];
end
if ~exist('para_p_output', 'var')|| isempty(para_p_output')
    para_p_output = [-0.1621   0.3514];
end
max_neigh_input = floor((1/pCon-para_p_input(2))/para_p_input(1));              % ensures p <= 1
p_Neighbours_input = para_p_input(1)*(1:max_neigh_input) + para_p_input(2);
max_neigh_output = floor(-para_p_output(2)/para_p_output(1));                   % ensures p >= 0
p_Neighbours_output = para_p_output(1)*(1:max_neigh_output) + para_p_output(2);

% Set random connectivity with probability pCon (if not preset)


=== Following is the header of samples/189160/HassEtAl2016/Run_update_inv_con_PSP.m ===
%% Compute new scaling factors for inv_con_PSP using update_inv_con_PSP 
%
% Run this whenever parameters are changed that affect the post-synaptic
% potential (PSP) in any of the neuron classes.
% Use par_E and par_I computed here in inv_con_PSP.m
%
%
% IMPORTANT:
% Before running this script, several changes need to be made:
%
%
% update_inv_con_PSP (rarely):
% - Adjust SimParTest.EvtMtx(1,1) such that the first neuron elicits a
%   single spike at around 500 ms (only if neuron parameters where changed).
%
% In test_update_inv_con_PSP (rarely):
% - Change STP values if they were changed in ConfigIDNet
%
% In ConfigIDNet (always):
% - Change NTypes line in ConfigIDNet to 
%    "NTypes = ones(1,14); NTypes(1) = 2;"
%
% In IDNetSim (always):
% - Prevent multivariate random number drawings by the line  
%    "if ismember(i,[])" 
% - Comment out the block starting with 
%    "while ~isempty(ind_out)" 
%   and use the previous block instead
% - Set "t_lat_act(j) = 1" and t_lat_LIF_act(j) = 1
%    instead of the real calculation
% - Comment out redistribution of neuron types
% - Set maxima and stds of STP parameters to zero in SetSyn
% - Set mean STP values to E2 or to I2, respectively, wherever there is more 
%   than one option
%
% In inv_con_PSP (always):
% - Set all par_E and par_I to one


% Compute scaling factors from simulation


=== Following is the header of samples/189160/HassEtAl2016/README.html ===
<html><pre>
***********************************************************************
 Simulation code from Hass, Hertaeg and Durstewitz (2016), "A detailed,
 data data-driven network model of prefrontal cortex reproduces key 
 features of in vivo activity", PLoS Comput Biol
***********************************************************************

This package should provide all files needed to simulate the network 
model introduced in the paper above. Run the simulation with 1000 
neurons for 1000 ms using the script 'RunIDNet.m'.

This default simulation completes in a minute or two and should
display a graph like:

<img src="./screenshot.png" alt="default run" width="550">

To reproduce Figure 3B, one would need to run the simulation for 31
seconds instead of 1 seconds (set SimTim to 31000 in line 24 and
T_skip to 1000 in line 25 of "RunIDNet.m") and plot the final six
seconds. This takes much longer than the 1 second simulation, of
course. These parameters can be changed in the script, as well as a
number of others which are often varied. The Fig 3B simulation should
resemble this:

<img src="screenshotExcerpt.png" alt="Fig 3B" width="550">

How to compute the other measures in Figure 3 are described in the
Methods section of the paper. Most of them are rather elementary (mean
ISI and CV are just the average interspike intervals and its standard
deviation divided by the mean, respectively, for each neuron). Only
the CC (cross correlation) is more involved, its computation is
described in Quiroga-Lombard et al. 2013 (cited in the paper). The
software for computing them is also publically available, the link can
be found in the paper.

All other parameters are defined in 'ConfigIDNet.m' and stored in a
common structure 'SimPar'. In 'IDNetSim.m', parameters specified by
distributions are randomly drawn and the actual simulation program
'IDNet.c' is run as a MEX file. The C code is compiled at the
beginning of 'RunIDNet.m', this line can be commented out after the


=== Following is the header of samples/189160/HassEtAl2016/RunIDNet.m ===
%% Worksheet runing the simulations and creating a raster plot  of the 
%% resulting spike train

% Main output: 
% - STMtx: Spike times in ms, (cell array, one cell per neuron)
% - V: Membrane potential in mV, (cell array, one cell per neuron)
% - T: Simulation time in ms (vector)


% -----------------  1) Prepare simulations  ------------------

% Set paths
addpath('IDNet');

% Compile MEX file (only needed at first run, and when IDNet.c is changed)
cd('IDNet')
mex IDNet.c
cd('..')

% Set overall simulation parameters
N=1000;         % Number of neurons
M = 1;          % Number of input neurons
Str=1;          % Number of columns/stripes
SimTim=1000;    % Simulation time in ms
T_skip=500;     % Initial part of the spike train to skip for analysis in ms

sEE=1; sIE=1; sEI=1; sII=1;                         % Synaptic weight scales
pEE = 1; pEI = 1; pIE = 1; pII = 1; pE=1; pI=1;     % Connectivity scales
I = zeros(1,14);                                    % Background input 
I(1) = 250;                                         % I_ex
I(8) = 250;
I(2:7) = 200;                                       % I_inh
I(9:14) = 200;

% Compute complete simulation parameter set and construct file name
SimPar = ConfigIDNet(N,M,Str,SimTim,I,[sEE sIE sEI sII],[pEE pEI pIE pII pE pI]);
filename_1=['PFC_' num2str(I(1)) '_' num2str(I(2)) '_' num2str(N) 'N_S' num2str(Str)];
filename_2=['_s_' num2str(sEE*1) '_' num2str(sIE*1) '_' num2str(sEI*1) '_' num2str(sII*1)];
filename_3=['_p_' num2str(pEE) '_' num2str(pEI) '_' num2str(pIE) '_' num2str(pII) '_' num2str(pE) '_' num2str(pI) '_' num2str(SimTim) 'ms'];
filename=[filename_1 filename_2 filename_3];


