=== Following is the header of samples/93395/hznd06_code/param.m ===
% PARAM.M
%
% This code is released in conjunction with the paper 
%
%	Huys QJM, Zemel RS, Natarajan R and Dayan P (2006): Fast population
%	coding Neural Computation
%	
% and can be downloaded from 
%
%	http://www.gatsby.ucl.ac.uk/~qhuys/code.html
%
% This script sets the parameters. It is called by MAIN.M. You shold not have to
% modify anything but this script. The main variable to set is RW. 
%
% Copyright Quentin Huys 2006


rw = 1;			% set rw=1 for OU prior, and rw=0 for smooth prior

%==============================================================================


=== Following is the header of samples/93395/hznd06_code/getstim.m ===
% GETSTIM.M
%
% This code is released in conjunction with the paper 
%
%	Huys QJM, Zemel RS, Natarajan R and Dayan P (2006): Fast population
%	coding Neural Computation
%	
% and can be downloaded from 
%
%	http://www.gatsby.ucl.ac.uk/~qhuys/code.html
%
% This script generates the stimuli. 
%
% Copyright Quentin Huys 2006



[dt1,dt2] = meshgrid([1:T]*delta,[1:T]*delta);
dt = abs(dt1-dt2);
meanstim = zeros(1,T);


=== Following is the header of samples/93395/hznd06_code/getinf.m ===
% GETINF.M
%
% This code is released in conjunction with the paper 
%
%	Huys QJM, Zemel RS, Natarajan R and Dayan P (2006): Fast population
%	coding Neural Computation
%	
% and can be downloaded from 
%
%	http://www.gatsby.ucl.ac.uk/~qhuys/code.html
%
% This script is the workhorse. It is called by MAIN.M and infers the posterior
% distribution p(s_T|\xi). If app=1 in PARAM.M, it also infers the approximate
% posteriors with metronomic spikes. 
%
% Copyright Quentin Huys 2006



%.........................compute true p(s_T|phi_0:T)...............................


=== Following is the header of samples/93395/hznd06_code/COPYRIGHT.txt ===
Copyright (C) 2006 Quentin Huys

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Quentin Huys	

Email: 	qhuys@gatsby.ucl.ac.uk
Web:	http://www.gatsby.ucl.ac.uk/~qhuys



=== Following is the header of samples/93395/hznd06_code/psinf.m ===
function [vps,mps,weight,ps] = psinf(id,time,sigma,lambda,tau,rw,s);
%
% PSINF.M
%
% This code is released in conjunction with the paper 
%
%	Huys QJM, Zemel RS, Natarajan R and Dayan P (2006): Fast population
%	coding Neural Computation
%	
% and can be downloaded from 
%
%	http://www.gatsby.ucl.ac.uk/~qhuys/code.html
%
% This function is called by GETINF.M. It computes the posterior at times at
% which a spike was observed.
%
% Copyright Quentin Huys 2006





=== Following is the header of samples/93395/hznd06_code/getspk.m ===
% GETSPK.M
%
% This code is released in conjunction with the paper 
%
%	Huys QJM, Zemel RS, Natarajan R and Dayan P (2006): Fast population
%	coding Neural Computation
%	
% and can be downloaded from 
%
%	http://www.gatsby.ucl.ac.uk/~qhuys/code.html
% 
% This script is called by MAIN.M and produces the mean rate for each Poisson
% neurone, which is then used to produce spikes. If less than 2 spikes are
% generated, a new stimulus is drawn. 
%
% Copyright Quentin Huys 2006


meanrate = exp(-.5*(repmat(stim(infsample,:),n,1)-repmat(nrnpos',1,T)).^2/sigma^2);
meanrate = maxrate*delta/(n*sqrt(2*pi*sigma^2))*meanrate;


=== Following is the header of samples/93395/hznd06_code/setup.m ===
% MAIN.M
%
% This code is released in conjunction with the paper 
%
%	Huys QJM, Zemel RS, Natarajan R and Dayan P (2006): Fast population
%	coding Neural Computation
%	
% and can be downloaded from 
%
%	http://www.gatsby.ucl.ac.uk/~qhuys/code.html
%
% This is a small script that gets the neuron preferred stimuli and some other
% bits.
%
% Copyright Quentin Huys 2006


T 	= Tmax/delta;
timevec = [1:T]/T*Tmax;
s 	= linspace(-lim,lim,ds);


=== Following is the header of samples/93395/hznd06_code/main.m ===
% MAIN.M
%
% This code is released in conjunction with the paper 
%
%	Huys QJM, Zemel RS, Natarajan R and Dayan P (2006): Fast population
%	coding Neural Computation
%	
% and can be downloaded from 
%
%	http://www.gatsby.ucl.ac.uk/~qhuys/code.html
%
% This script is the main script. It generates a time-varying stimulus drawn
% from a Gaussian Process prior, produces a population spike train from it and
% infers the posterior over the stimulus given the spikes. It calls PARAM.M to
% set the parameters, and that should be the only script you should have to
% modify. It then calls SETUP.M to setup a few more things and GETSTIM.M to
% produce the time-varying stimuli. The iteration over these stimuli then
% begins, and for each stimulus a set of spikes is drawn by GETSPK.M, the
% true posterior distribution p(s_T|\xi) is inferred and plotted by PLOTS.M
%


=== Following is the header of samples/93395/hznd06_code/pspred.m ===
function [vps,mps,weight,ps] = pspred(id,spiketime,predtime,sigma,lambda,tau,rw,s);
%
% PSPRED.M
%
% This code is released in conjunction with the paper 
%
%	Huys QJM, Zemel RS, Natarajan R and Dayan P (2006): Fast population
%	coding Neural Computation
%	
% and can be downloaded from 
%
%	http://www.gatsby.ucl.ac.uk/~qhuys/code.html
%
% This function is called by GETINF.M. It computes the posterior at times at
% which NO spike was observed.
%
% Copyright Quentin Huys 2006





=== Following is the header of samples/93395/hznd06_code/README.txt ===
INTRO
======================================================================

Example code for fast population coding with sparse spike trains. 
This code is released in conjunction with the paper 

	Huys QJM, Zemel RS, Natarajan R and Dayan P (2006): Fast population
	coding. Neural Computation
	
and can be downloaded from 

	http://www.gatsby.ucl.ac.uk/~qhuys/code.html

The paper can be downloaded from

      http://www.gatsby.ucl.ac.uk/~qhuys/pub/hznd06.pdf

Copyright Quentin Huys 2006
qhuys@gatsby.ucl.ac.uk



=== Following is the header of samples/93395/hznd06_code/LICENSE.txt ===
The GNU General Public License (GPL)
Version 2, June 1991

Copyright (C) 1989, 1991 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.

Preamble

The licenses for most software are designed to take away your freedom to share
and change it. By contrast, the GNU General Public License is intended to
guarantee your freedom to share and change free software--to make sure the
software is free for all its users. This General Public License applies to most
of the Free Software Foundation's software and to any other program whose
authors commit to using it. (Some other Free Software Foundation software is
covered by the GNU Library General Public License instead.) You can apply it to
your programs, too.



=== Following is the header of samples/93395/hznd06_code/plots.m ===
% PLOTS.M
%
% This code is released in conjunction with the paper 
%
%	Huys QJM, Zemel RS, Natarajan R and Dayan P (2006): Fast population
%	coding Neural Computation
%	
% and can be downloaded from 
%
%	http://www.gatsby.ucl.ac.uk/~qhuys/code.html
%
% This script produces the plots. 
%
% Copyright Quentin Huys 2006



clf
colormap((1-gray).^2)



