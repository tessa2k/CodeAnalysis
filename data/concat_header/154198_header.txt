=== Following is the header of samples/154198/SturzlEtAl2000/index.html ===
<html><pre>
For the paper:

Sturzl W, Kempter R, van Hemmen JL (2000) Theory of arachnid prey
localization. Phys Rev Lett 84:5668-71

Abstract:

Sand scorpions and many other arachnids locate their prey through
highly sensitive slit sensilla at the tips (tarsi) of their eight
legs. This sensor array responds to vibrations with stimulus-locked
action potentials encoding the target direction. We present a neuronal
model to account for stimulus angle determination using a population
of second-order neurons, each receiving excitatory input from one
tarsus and inhibition from a triad opposite to it. The input opens a
time window whose width determines a neuron's firing
probability. Stochastic optimization is realized through tuning the
balance between excitation and inhibition. The agreement with
experiments on the sand scorpion is excellent.

Brian simulator models are available at this web page:

<a href="http://briansimulator.org/docs/examples-frompapers_Sturzl_et_al_2000.html">http://briansimulator.org/docs/examples-frompapers_Sturzl_et_al_2000.html</a>

Note that the poisson input in the paper was replaced by integrate and
fire neurons.  The simulation generates an image of eight neurons
spike activity from a prey at 144 degrees (see phi assignment on line
8 in Brian program at above link):

<img src="./screenshot.png" alt="screenshot" width="550">

This simulation requires Brian which can be downloaded and installed
from the instructions available at <a href="http://www.briansimulator.org/">http://www.briansimulator.org/</a>

For support on installing and using Brian simulations there is a
support group at <a href="https://groups.google.com/group/briansupport">https://groups.google.com/group/briansupport</a>.
</pre></html>


=== Following is the header of samples/154198/SturzlEtAl2000/SturzlEtAl2000.py ===
from brian import *

# Parameters
degree = 2 * pi / 360.
duration = 500 * ms
R = 2.5 * cm # radius of scorpion
vr = 50 * meter / second # Rayleigh wave speed
phi = 144 * degree # angle of prey
A = 250 * Hz
deltaI = .7 * ms # inhibitory delay
gamma = (22.5 + 45 * arange(8)) * degree # leg angle
delay = R / vr * (1 - cos(phi - gamma))  # wave delay

# Wave (vector w)
t = arange(int(duration / defaultclock.dt) + 1) * defaultclock.dt
Dtot = 0.
w = 0.
for f in range(150, 451):
    D = exp(-(f - 300) ** 2 / (2 * (50 ** 2)))
    xi = 2 * pi * rand()
    w += 100 * D * cos(2 * pi * f * t + xi)
    Dtot += D
w = .01 * w / Dtot

# Rates from the wave
def rates(t):
    return w[array(t / defaultclock.dt, dtype=int)]

# Leg mechanical receptors
tau_legs = 1 * ms
sigma = .01
eqs_legs = """
dv/dt=(1+rates(t-d)-v)/tau_legs+sigma*(2./tau_legs)**.5*xi:1
d : second
"""
legs = NeuronGroup(8, model=eqs_legs, threshold=1, reset=0, refractory=1 * ms)
legs.d = delay
spikes_legs = SpikeCounter(legs)

# Command neurons


