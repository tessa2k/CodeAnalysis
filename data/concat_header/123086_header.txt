=== Following is the header of samples/123086/CONFIGR_matlab/FillingFIGURE.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007). 
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx. 
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as do the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if exist('IallRects')
    IrectSize=IallRects(:,2)+IallRects(:,4)-IallRects(:,1)-IallRects(:,3);
    
    
    [dumArray sortRect]=sort(IrectSize);


=== Following is the header of samples/123086/CONFIGR_matlab/sign02.m ===
function A=sign02(B);
A=sign(B);
Cindex=find(A==-1);
A(Cindex)=0;



    



    

=== Following is the header of samples/123086/CONFIGR_matlab/CONFIGR_6.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007). 
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx. 
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%This file contains the initialization commands; Set input location here.
CONFIGR_6_Init_Function;


=== Following is the header of samples/123086/CONFIGR_matlab/CONFIGR_6_CreatePlots.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007). 
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx. 
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


FillingStats.Rule=NumFilled_Rule3;
FillingStats.GROUND=NumFilled_GROUND;
FillingStats.FIGURE=NumFilled_FIGURE;


=== Following is the header of samples/123086/CONFIGR_matlab/CONFIGR_6_Init.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007). 
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx. 
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



tic



=== Following is the header of samples/123086/CONFIGR_matlab/sign01.m ===
function A=sign01(B);
[sizBR sizBC]=size(B);
for i=1:sizBR
    for j=1:sizBC
A(i,j)=sign(B(i,j));
if A(i,j)==0;A(i,j)=1;end;
end
end


    

=== Following is the header of samples/123086/CONFIGR_matlab/EmptyRectangleTypeOne_Ground_6.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007). 
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx. 
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for i=1:length(iSPPura{1})
    DeepSearch=0;
    
    searchlight=0;%checks if any corners have been found


=== Following is the header of samples/123086/CONFIGR_matlab/CheckBound.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007). 
% CONFIGR: A vision-based system for long-range figure completion. 
% Neural Networks, xx(x) xxx-xxx. 
% Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%This function checks to see if an empty rectangle is bounded by tracks


=== Following is the header of samples/123086/CONFIGR_matlab/CheckOutBoundGround.m ===
%This function checks to see if a rectangle is bounded by tracks
function [OutBool , NumFilledOut]=CheckOutBoundGround(LocIminT,LocImaxT,LocJminT,LocJmaxT,SubPixRes,IpixelsFillA,FillNoFillVal,ImSize,NumFilled)


LocImin=max(LocIminT-1,1);
LocImax=min(LocImaxT,ImSize(1));

LocJmin=max(LocJminT-1,1);
LocJmax=min(LocJmaxT,ImSize(2));

Horiz_=[LocJminT+2:SubPixRes:LocJmaxT-2];
Vert_=[LocIminT+2:SubPixRes:LocImaxT-2];

%To remove Rule 3 (More than Half pixels are filled in or image FiGURE),
%simply make Track_length_half real big

Track_length_half=(length(Horiz_)+length(Vert_))*max(ImSize)*2;

%CHOOSE ONE OF THESE--|^



=== Following is the header of samples/123086/CONFIGR_matlab/SimpleRoadImageBlack.m ===
function ImageColor=SimpleRoadImageBlack(Iin)

SizeIn=size(Iin);
Ibackground=(Iin==0);
Ifeature=(Iin==1);
IFfeature=(Iin==.5);%+(Iin==.75);
IFground=(Iin==.25)+(Iin==.75);
IEdge=(Iin==.6);
Igrids=[Iin==.375];
%Iconflict=(Iin==.75);
Idiagonal=(Iin==.85);
Icorner=(Iin==.125);
Ihighlight=(Iin==.542);
%This is the new version where the filled-in ground is darker
Grey2Val=[156+40 154+40 156+40]/255;
%GreyVal=[156+70 154+70 156+70]/255;
GreyVal=[1 1 1];
%Grey2Val=[1 1 1];
CornerVal=[10 10 10]/255;



=== Following is the header of samples/123086/CONFIGR_matlab/CONFIGR_6_FindBound.m ===

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in CAS/CNS Technical Report TR-2007-016
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Finds boundaries in input image
for i=1:4
    Icrawl{i}=zeros(ImSize);
end



=== Following is the header of samples/123086/CONFIGR_matlab/CreateNewDiagonals.m ===

SubPixRes=5;
%load tempIpixelsMediumScaleNewRule
%load tempIpixelsCoarsestScaleNewRule
load MontereyScaledNew
%load MontereyScaledTwice

Iinterpol_Coarse=Iinterpol;
Ipixels_Coarse=Ipixels;
StoreDiagVals_Coarse=FillingStats.StoreDiagVals;
%filled_in_iter_Coars=filled_in_iter;

%load tempIpixelsFullScale

% load MontereyBig
% 
% IinterpolLines_Coarse=(zeros(size(Ipixels)));
% for i=1:size(StoreDiagVals_Coarse,1)
%     %CHANGE MULTIPLIER DEPENDING ON SCALE
%     tmpVect=[StoreDiagVals_Coarse(i,1:4)*2 StoreDiagVals_Coarse(i,5)];


=== Following is the header of samples/123086/CONFIGR_matlab/EmptyRectangleTypeTwo_Ground_6.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007). 
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx. 
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


for i=1:length(iSPPura{2})
    DeepSearch=0;
 


=== Following is the header of samples/123086/CONFIGR_matlab/InterpolateLines.m ===
%Created on 11/14/2005
%This Function creates the interpolating diagonals of the empty rectangles
%that span figure in SimpleCrawlMayConflict. The algorithm is general
%enough that it creates a diagonal in any rectangle. type decides which
%main diagonal is to be spanned. type='normal' chooses the identity
%diagonal. 
%   Algorithm: 
%   1 Take Rectangle as Input; Compute Smallest size (row or column)
%   2 Compute an eye Matrix of that size and resize it size of Input.
%   3 Xor this with input and present as output.
%   Note: Input is assumed to be binary. Output is constrained to be binary
function Iout = InterpolateLines(Iin,type,SubPixRes)
IinSize=size(Iin);
minIinSize=min(IinSize);
Ieye=eye(round((minIinSize-1)/SubPixRes));
if type==1
Iout=sign02(imresize_old(Ieye,IinSize)+Iin);
else
    Iout=sign02(imresize_old(fliplr(Ieye),IinSize)+Iin);
end

=== Following is the header of samples/123086/CONFIGR_matlab/plotIpixels.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in CAS/CNS Technical Report TR-2007-016
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



function ret_val = plotIpixels(Ipixels,Iinterpol,filled_in_figr_rects_store,fig_num_in)

ImActSize=size(Ipixels)/5;




=== Following is the header of samples/123086/CONFIGR_matlab/AddNewRectangles.m ===
for i=1:length(iSPNewWalls{1})
    DeepSearch=0;
    
    searchlight=0;%checks if any corners have been found
    step_search=0; %increments area of search
    span_max=1; %checks if bounds of image have been reached
    
    N=FillInLimit+1; 
    iMIN=max(iSPNewWalls{1}(i)-N,1);
    iMAX=max(iSPNewWalls{1}(i),1);
    jMIN=min(jSPNewWalls{1}(i),1);
    jMAX=min(jSPNewWalls{1}(i)+N,ImSize(2));
    
    
    if sum(sum(sign02(IsparsePura{3}(iMIN:iMAX-1,jMIN+1:jMAX)+IsparseNewWalls{3}(iMIN:iMAX-1,jMIN+1:jMAX))))~=0 
        [iPart,jPart,sPart]=find(IsparsePura{3}(iMIN:iMAX-1,jMIN+1:jMAX)+IsparseNewWalls{3}(iMIN:iMAX-1,jMIN+1:jMAX));
        KernSizeTempI=iMAX-iMIN+1;
        KernSizeTempJ=jMAX-jMIN+1;
        
        [YshortestDist,indexK]=sort(abs(KernSizeTempI-iPart)+jPart); 


=== Following is the header of samples/123086/CONFIGR_matlab/CONFIGR_6_Init_Function.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007). 
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx. 
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



tic



=== Following is the header of samples/123086/CONFIGR_matlab/runCONFIGR.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007).
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx.
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
%
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm
%
%
% Usage:
% I_output = runCONFIGR(I,PixRes)
% I ---------- input image
% PixRes ----- pixel resolution 1:fine 2:medium 3:coarse
%              N implies that each coarse-scale pixel is created from an


=== Following is the header of samples/123086/CONFIGR_matlab/SimpleRoadImageFunky_both.m ===
function ImageColor=SimpleRoadImageFunky_both(Iin)

SizeIn=size(Iin);
Ibackground=(Iin==0);
Ifeature=(Iin==1);
IFfeature=(Iin==.5);%+(Iin==.75);
IFground=(Iin==.25)+(Iin==.75);
IEdge=(Iin==.6);
Igrids=[Iin==.375];
%Iconflict=(Iin==.75);
Idiagonal_a=(Iin==.85);
Idiagonal_b=(Iin==.9);
Idiagonal_a=(Iin==.9+.85)+Idiagonal_a;

% try
% Idiagonal_a=Iinterpol_fine+0*Iin;
% catch
% 'Wrong or No diagonal matrix!'    
% Idiagonal_a=zeros(size(Iin));
% end


=== Following is the header of samples/123086/CONFIGR_matlab/imresize_old_CONFIGR.m ===
function varargout = imresize_old_CONFIGR(varargin)
%IMRESIZE Resize image.
%   IMRESIZE resizes an image of any type using the specified
%   interpolation method. Supported interpolation methods
%   include:
%
%        'nearest'  (default) nearest neighbor interpolation
%
%        'bilinear' bilinear interpolation
%
%        'bicubic'  bicubic interpolation
%
%   B = IMRESIZE(A,M,METHOD) returns an image that is M times the
%   size of A. If M is between 0 and 1.0, B is smaller than A. If
%   M is greater than 1.0, B is larger than A. If METHOD is
%   omitted, IMRESIZE uses nearest neighbor interpolation.
%
%   B = IMRESIZE(A,[MROWS MCOLS],METHOD) returns an image of size
%   MROWS-by-MCOLS. If the specified size does not produce the
%   same aspect ratio as the input image has, the output image is


=== Following is the header of samples/123086/CONFIGR_matlab/InterpolateDiagonalLines.m ===
%Usage:Iinterp = InterpolateDiagonalLines(I,Ipixels)
%This function interpolates the diagonals in CONFIGR filling-in areas
%I is the input to CONFIGR and Ipixels is the output obtained from
%[I_out,Ipixels]=runCONFIGR(I)


function Iinterp = InterpolateDiagonalLines(I,Ipixels)

CheckCornKernel=[-1 -1 -1;-1 1 1;-1 1 1];
CheckThinCornKernel=[-1 -1 -1;-1 1 -1;-1 1 -1];
IpixelsFigure=double((Ipixels==.5)+-1*(Ipixels~=.5));
IrectCorners=(conv2(IpixelsFigure,flipud(CheckCornKernel),'same')==9)+...
    (conv2(IpixelsFigure,fliplr(CheckCornKernel),'same')==9)+...
    (conv2(IpixelsFigure,flipud(fliplr(CheckCornKernel)),'same')==9)+...
    (conv2(IpixelsFigure,CheckCornKernel,'same')==9);
IrectCorners=IrectCorners+(conv2(IpixelsFigure,flipud(CheckThinCornKernel),'same')==9)+...
    (conv2(IpixelsFigure,rot90(CheckThinCornKernel),'same')==9)+...
    (conv2(IpixelsFigure,fliplr(rot90(CheckThinCornKernel)),'same')==9)+...
    (conv2(IpixelsFigure,CheckThinCornKernel,'same')==9);
IrectCornersT=double((conv2(I,[1 1 1;1 1 1; 1 1 1;],'same')==1).*IrectCorners);


=== Following is the header of samples/123086/CONFIGR_matlab/readme.txt ===
This is the readme file for the model associated with the paper:

Carpenter, G.A. , Gaddam, C.S. , Mingolla, E., CONFIGR: A vision-
based model for long-range figure completion, Neural Networks -
Volume 20, 1109-1131 (2007).

Abstract

CONFIGR (CONtour FIgure GRound) is a computational model based on
principles of biological vision that completes sparse and noisy image
figures. Within an integrated vision/recognition system, CONFIGR
posits an initial recognition stage which identifies figure pixels
from spatially local input information. The resulting, and typically
incomplete, figure is fed back to the ?early vision? stage for long-
range completion via filling-in. The reconstructed image is then re-
presented to the recognition system for global functions such as
object recognition. In the CONFIGR algorithm, the smallest
independent image unit is the visible pixel, whose size defines a
computational spatial scale. Once the pixel size is fixed, the entire
algorithm is fully determined, with no additional parameter choices.


=== Following is the header of samples/123086/CONFIGR_matlab/FillingGROUND.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007).
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx.
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
%
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


if exist('IallRects')
    IrectSize=IallRects(:,2)+IallRects(:,4)-IallRects(:,1)-IallRects(:,3);



=== Following is the header of samples/123086/CONFIGR_matlab/CONFIGR_6_LobePropagate.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007). 
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx. 
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Initialize Temporary Matrices here
IpixelsFilledInTemp=sparse(zeros(ImSize));
Lob0=fliplr(LobeTemp1);


=== Following is the header of samples/123086/CONFIGR_matlab/SimpleRoadImage.m ===
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is an implementation of CONFIGR,
% as described in:
% Carpenter, G. A., Gaddam, C. S., & Mingolla, E. (2007). 
% CONFIGR: A vision-based system for long-range figure completion. Neural Networks, xx(x) xxx-xxx. 
%  Technical Report CAS/CNS TR-2007-016, Boston, MA: Boston University.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programmed by Chaitanya Sai (August 2007)
%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% The notation follows the article's notation,
% as does the headers for each step of the
% algorithm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function ImageColor=SimpleRoadImage(Iin)

SizeIn=size(Iin);


=== Following is the header of samples/123086/CONFIGR_matlab/license.txt ===
Copyright (c) 2009, Sai Gaddam
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are 
met:

    * Redistributions of source code must retain the above copyright 
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in 
      the documentation and/or other materials provided with the distribution
      
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 


