{
    "velsetupfirst.m": {
        "comments": [
            "%   This script formats the 2 parameter velocity data into two\n%   vectors with par1 and par2 values and a matrix with (i, j)th\n%   element being the conduction velocity resulting from the ith\n%   par1 value and jth par2 value.  Use this script only once.\n%   Use velsetupnext.m for additional data for the same plot.\n%   To use, first load the vel(par1, par2) data from a dat file\n%   into the matrix 'data' with the following command:\n%   data = load('location/filename.dat').  Next, use the command:\n%   velsetupfirst\n\n%   E.g.\n%   data = load('VELOCITY-141106_myeL_gap_1.dat');\n%   velsetupfirst\n%   data = load('VELOCITY-141106_myeL_gap_2.dat');\n%   velsetupnext\n\nnumofrows = size(data, 1);\n\ni = 1;\nwhile i <= numofrows\n    checkpar = data(i, 1);\n    checkparind = find(data(i:end, 1) < checkpar);\n    checkparind = checkparind+i-1;\n    numtomove = size(checkparind, 1);\n    if numtomove == 0\n        i = i+1;\n    end\n    if numtomove ~= 0\n        datatomove = data(checkparind, :);\n        data(checkparind, :) = [];\n        data((i+numtomove):(end+numtomove), :) = data(i:end, :);\n        data(i:(i+numtomove-1), :) = datatomove;\n    end\nend\ncheckpar = data(1, 1);\ncheckparind = find(data(:, 1) == checkpar);\nnumtomove = size(checkparind, 1);\ndatatomove = data(checkparind, :);\ndatatomove(:, 4) = [1:numtomove]';\ni = 2;\nwhile i <= numtomove\n    j = i-1;\n    while j >= 1\n        if datatomove(i, 2) < datatomove(j, 2)\n            datatomove([j, i], :) = datatomove([i, j], :);\n            i = j;\n        end\n        j = j-1;\n    end\n    i = i+1;\nend\ndatatomove = datatomove(:, 4);\nchangeloop = numofrows/numtomove-1;\nfor i = 0:changeloop\n    oldindexes = [1:numtomove]'+numtomove*i;\n    newindexes = datatomove+numtomove*i;\n    data(oldindexes, :) = data(newindexes, :);\nend\n\npar1 = data(:, 1);\npar2 = data(:, 2);\n\nparsize1 = numofrows;\ni = 1;\nwhile i < parsize1\n    checkpar = par1(i, 1);\n    for j = parsize1:(-1):(i+1)\n        if par1(j, 1) == checkpar\n            par1(j, :) = [];\n        end\n    end\n    parsize1 = size(par1, 1);\n    i = i+1;\nend\n\nparsize2 = numofrows;\ni = 1;\nwhile i < parsize2\n    checkpar = par2(i, 1);\n    for j = parsize2:(-1):(i+1)\n        if par2(j, 1) == checkpar\n            par2(j, :) = [];\n        end\n    end\n    parsize2 = size(par2, 1);\n    i = i+1;\nend\n\nvel = zeros(parsize1, parsize2);\nk = 0;\nfor i = 1:parsize1\n    for j = 1:parsize2\n        k = k+1;\n        vel(i, j) = data(k, 3);\n    end\nend\n\nclear numofrows i j k checkpar checkparind numtomove datatomove changeloop oldindexes newindexes"
        ],
        "variables": [
            "use",
            "additional",
            "To",
            "command",
            "being",
            "m",
            "th",
            "velsetupnext",
            "file",
            "vectors",
            "filename",
            "clear",
            "numtomove",
            "and",
            "oldindexes",
            "only",
            "first",
            "This",
            "i",
            "data",
            "j",
            "for",
            "same",
            "zeros",
            "a",
            "resulting",
            "element",
            "dat",
            "Use",
            "location",
            "once",
            "size",
            "the",
            "numofrows",
            "velocity",
            "if",
            "changeloop",
            "load",
            "following",
            "into",
            "ith",
            "newindexes",
            "VELOCITY",
            "parsize1",
            "vel",
            "formats",
            "find",
            "from",
            "E",
            "script",
            "with",
            "k",
            "two",
            "Next",
            "jth",
            "checkparind",
            "parsize2",
            "end",
            "value",
            "this",
            "g",
            "par1",
            "checkpar",
            "conduction",
            "while",
            "values",
            "plot",
            "datatomove",
            "velsetupfirst",
            "par2",
            "parameter",
            "matrix"
        ]
    },
    "velsetupnext.m": {
        "comments": [
            "%   Run this to include additional 2 parameter velocity data.\n%   Thus, the data generated from velsetupfirst.m is updated.\n%   Run after velsetupfirst.m and follow the same instructions,\n%   except use command: velsetupnext instead.\n%   velsetupfirst.m should only be used once, but velsetupnext.m\n%   can be used as many times as needed after velsetupfirst.m\n%   has been used.\n\n%   E.g.\n%   data = load('VELOCITY-141106_myeL_gap_1.dat');\n%   velsetupfirst\n%   data = load('VELOCITY-141106_myeL_gap_1.dat');\n%   velsetupnext\n\nnumofdata = size(data, 1);\n\nfor i = 1:numofdata\n    newpar1 = data(i, 1);\n    newpar2 = data(i, 2);\n    newvel = data(i, 3);\n    indnewpar1 = find(par1 == newpar1);\n    indnewpar2 = find(par2 == newpar2);\n    if size(indnewpar1, 1) == 0\n        indnewpar1 = 1;\n        for j = 1:parsize1\n            if par1(j) < newpar1\n                indnewpar1 = indnewpar1+1;\n            end\n            if par1(j) > newpar1\n                j = parsize1;\n            end\n        end\n        parsize1 = parsize1+1;\n        par1(parsize1, 1) = [0];\n        par1((indnewpar1+1):parsize1, 1) = par1(indnewpar1:(parsize1-1), 1);\n        par1(indnewpar1, 1) = newpar1;\n        vel(parsize1, :) = zeros(1, parsize2);\n        vel((indnewpar1+1):parsize1, :) = vel(indnewpar1:(parsize1-1), :);\n        vel(indnewpar1, :) = zeros(1, parsize2);\n    end\n    if size(indnewpar2, 1) == 0\n        indnewpar2 = 1;\n        for j = 1:parsize2\n            if par2(j) < newpar2\n                indnewpar2 = indnewpar2+1;\n            end\n            if par2(j) > newpar2\n                j = parsize2;\n            end\n        end\n        parsize2 = parsize2+1;\n        par2(parsize2, 1) = [0];\n        par2((indnewpar2+1):parsize2, 1) = par2(indnewpar2:(parsize2-1), 1);\n        par2(indnewpar2, 1) = newpar2;\n        vel(:, parsize2) = zeros(parsize1, 1);\n        vel(:, (indnewpar2+1):parsize2) = vel(:, indnewpar2:(parsize2-1));\n        vel(:, indnewpar2) = zeros(parsize1, 1);\n    end\n    vel(indnewpar1, indnewpar2) = newvel;\nend\n\nclear numofdata newpar1 newpar2 newvel indnewpar1 indnewpar2 i j"
        ],
        "variables": [
            "use",
            "additional",
            "command",
            "m",
            "after",
            "can",
            "indnewpar2",
            "needed",
            "velsetupnext",
            "zeros",
            "clear",
            "as",
            "and",
            "Run",
            "only",
            "same",
            "data",
            "for",
            "follow",
            "i",
            "instead",
            "has",
            "dat",
            "size",
            "newpar1",
            "if",
            "j",
            "once",
            "newpar2",
            "the",
            "to",
            "velocity",
            "been",
            "load",
            "VELOCITY",
            "parsize1",
            "instructions",
            "used",
            "times",
            "updated",
            "find",
            "vel",
            "from",
            "E",
            "indnewpar1",
            "script",
            "be",
            "parsize2",
            "end",
            "this",
            "but",
            "generated",
            "Thus",
            "g",
            "par1",
            "should",
            "is",
            "include",
            "velsetupfirst",
            "par2",
            "numofdata",
            "parameter",
            "newvel",
            "except",
            "many"
        ]
    },
    "readme.txt": {
        "comments": [
            "-----VELOCITY-----\n\nAttached are six files related to obtaining conduction velocities.  With these,\nyou should be able to load our base neuron, change most of its parameters (e.g.\ntighten delta, the submyelin gap size), and record the resulting conduction\nvelocities.\n\nBase neuron:\n NEURON_001-130308.hoc\nAlgorithms:\n ALG_PARCHA-130523.hoc (\"PARameter CHAnge\")\n ALG_VELOCITY-130308.hoc\nBatch file:\n BATCH_VELOCITY-141106_myeL_gap_1.hoc\n BATCH_VELOCITY-141106_myeL_gap_2.hoc\nOther:\n ALG_PARCHA-130523.pdf (Supplementary documentation for the PARCHA algorithm)\n\nBATCH_VELOCITY-141106_myeL_gap_1.hoc and BATCH_VELOCITY-141106_myeL_gap_2.hoc are \nthe only HOC files that should be executed. They will load the base neuron, the two \nalgorithms, then record the conduction velocities of 54 axons (6 different \ninternode lengths X 9 different submyelin gap sizes). Each batch file simulates \nthree different internode lengths.  The outputs are two DAT files each containing a \n27x3 matrix, where each of the 54 rows contain an internode length, a gap size, and \nthe resulting velocity. Please note that these batch files may take a long time to \nrun on some computers. If this is unacceptable, you may need to edit the batch file \nand remove some parameters.\n\nThe output of the batch files will be in the MATLAB folder.",
            ""
        ],
        "variables": [
            "of",
            "length",
            "able",
            "Batch",
            "in",
            "Each",
            "PARCHA",
            "the",
            "PARameter",
            "remove",
            "e",
            "tighten",
            "some",
            "two",
            "submyelin",
            "Algorithms",
            "Base",
            "g",
            "time",
            "six",
            "If",
            "HOC",
            "axons",
            "change",
            "pdf",
            "need",
            "NEURON_001",
            "matrix",
            "lengths",
            "neuron",
            "three",
            "DAT",
            "and",
            "files",
            "take",
            "you",
            "simulates",
            "a",
            "The",
            "Other",
            "ALG_PARCHA",
            "outputs",
            "unacceptable",
            "X",
            "that",
            "then",
            "this",
            "Attached",
            "will",
            "different",
            "algorithm",
            "an",
            "rows",
            "output",
            "long",
            "parameters",
            "folder",
            "batch",
            "each",
            "hoc",
            "our",
            "file",
            "Supplementary",
            "gap",
            "ALG_VELOCITY",
            "load",
            "on",
            "record",
            "edit",
            "be",
            "these",
            "velocities",
            "containing",
            "With",
            "obtaining",
            "may",
            "base",
            "should",
            "note",
            "is",
            "are",
            "BATCH_VELOCITY",
            "MATLAB",
            "run",
            "most",
            "documentation",
            "only",
            "for",
            "resulting",
            "size",
            "to",
            "velocity",
            "computers",
            "VELOCITY",
            "They",
            "where",
            "internode",
            "its",
            "CHAnge",
            "contain",
            "algorithms",
            "conduction",
            "Please",
            "delta",
            "executed",
            "sizes",
            "related"
        ]
    },
    "voltsetup.m": {
        "comments": [
            "%   This script formats the voltage data from filename.dat (string)\n%   Outputs are:\n%   pos = n x 1 vector containing the positions, where first position is\n%   defined to be at 0\n%   time = m x 1 vector containing the times, where the first time is\n%   defined to be at 0\n%   volt = m x n matrix where volt(i, j) is the voltage of position n at\n%   time m\n\n%   E.g.\n%   [posI1, timeI1, voltI1] = voltsetup('INTVOLTAGE-150108_gap_1.dat');\n%   [posI2, timeI2, voltI2] = voltsetup('INTVOLTAGE-150108_gap_2.dat');\n%   [posE1, timeE1, voltE1] = voltsetup('EXTVOLTAGE-150108_gap_1.dat');\n%   [posE2, timeE2, voltE2] = voltsetup('EXTVOLTAGE-150108_gap_2.dat');\n\n data = load(filename);\n pos = data(1, 2:end);\n pos = pos';\n time = data(2:end, 1);\n time = time-time(1);\n volt = data(2:end, 2:end);"
        ],
        "variables": [
            "of",
            "voltI2",
            "timeE1",
            "posE2",
            "m",
            "filename",
            "x",
            "posE1",
            "first",
            "This",
            "voltE1",
            "i",
            "data",
            "positions",
            "j",
            "voltE2",
            "dat",
            "pos",
            "EXTVOLTAGE",
            "function",
            "voltI1",
            "the",
            "to",
            "voltsetup",
            "load",
            "voltage",
            "n",
            "INTVOLTAGE",
            "timeI1",
            "times",
            "formats",
            "at",
            "where",
            "from",
            "E",
            "script",
            "be",
            "timeI2",
            "posI1",
            "containing",
            "defined",
            "string",
            "timeE2",
            "end",
            "g",
            "time",
            "position",
            "volt",
            "posI2",
            "vector",
            "is",
            "Outputs",
            "are",
            "matrix"
        ]
    }
}