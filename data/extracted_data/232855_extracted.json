{
    "readme.txt": {
        "comments": [
            "This is the readme for the model associated with\nStinchcombe, AR et al., 'Multiplexing Visual Signals in the Suprachiasmatic Nuclei', Cell Reports, Volume 21, Issue 6, 1418-1425.\n\nTo run, enter \"SCNephyssimulation\" at the MATLAB command prompt. A raster plot will be generated showing the spike times of SCN neurons for a full field flash stimulus and a randomly generated connectivity. This code was developed in MATLAB R2017a.\n",
            ""
        ],
        "variables": [
            "of",
            "command",
            "To",
            "flash",
            "in",
            "Stinchcombe",
            "MATLAB",
            "run",
            "field",
            "et",
            "and",
            "SCN",
            "Suprachiasmatic",
            "This",
            "neurons",
            "R2017a",
            "for",
            "Visual",
            "Reports",
            "a",
            "showing",
            "Volume",
            "the",
            "Issue",
            "stimulus",
            "randomly",
            "associated",
            "Multiplexing",
            "Cell",
            "model",
            "full",
            "developed",
            "al",
            "connectivity",
            "times",
            "at",
            "was",
            "with",
            "be",
            "SCNephyssimulation",
            "raster",
            "generated",
            "will",
            "Nuclei",
            "prompt",
            "A",
            "plot",
            "readme",
            "is",
            "Signals",
            "enter",
            "AR",
            "code",
            "spike"
        ]
    },
    "SCNephyssimulation.m": {
        "comments": [
            "% number of neurons\n    M = 14^2;  % number of pixels (M1 ipRGC cells) - must be a perfect square\n    \n    % electrophysiology parameters\n    param = defaultparameters();\n    \n    % more physical parameters\n    gaba_conn_prob    = 0.01;     % the density of connections within the SCN\n    num_pixel_to_scn  = 1;        % the number of connections from each pixel to the SCN\n    exgabafrac        = 0.2;      % fraction of SCN neurons that have an excitatory response to gaba\n    CTstd             = 2;        % hr, standard deviation of circadian times\n    Egabaex           = -40;      % mV, excitatory gaba reversal potential\n    Egabain           = -80;      % mV, inhibitory gaba reversal potential\n    inputtype         = 0;        % 0 for full field, 1/-1 for vertical/horizontal bars of light\n    \n    % numerical parameters\n    tf     = 15000;  % ms, final time of the simulation\n    dt     = 0.1;    % ms, fixed timestep\n    pertV  = 20;     % mV, +/- range of uniform perturbation to initial membrane voltages\n    \n    % generate connectivities\n    Cgaba = ceil(sprand(N,N,gaba_conn_prob)); % on average N^2*gaba_conn_prob non-zeros\n    m_in = repmat( 1:M, num_pixel_to_scn , 1 );\n    n_out = NaN(num_pixel_to_scn,M);\n    for m=1:M\n        n_out(:,m) = randperm(N,num_pixel_to_scn)'; % no replacement with randperm\n    end\n    Cin = sparse(n_out(:),m_in(:),ones(size(n_out)),N,M);\n        \n    % setup the SCN population\n    x = defaultic();\n    x = structfun( @(in) repmat(in,N,1), x, 'UniformOutput', false ); % expand initial condition\n    x.v = x.v + (rand(N,1)*2-1)*pertV; % perturb the initial voltages to desynchronize the population\n    param = structfun( @(in) repmat(in,N,1), param, 'UniformOutput', false ); % expand parameters \n    \n    param.spikethres = -20; % mV, minimum peak value of voltage to record a spike\n    param.dtspikemin =   5; % ms, minimum time between peaks to record a spike\n    % perturb CT over the population to introduce heterogeneity \n    % and to account for multiple experimental times\n    param.CT = param.CT + CTstd*randn(N,1);\n    param = setcircadiantime(param);\n    \n    % select GABA reversal potentials\n    param.Egaba = Egabain*ones(N,1);\n    param.Egaba( datasample( 1:N, round( exgabafrac*N ), 'Replace',false ) ) = Egabaex;\n    \n    % timestepping setup\n    numsteps = ceil(tf/dt);\n    step = 0;\n            \n    % setup for spike detection\n    spikedata.tlast = NaN(N,1);\n    spikedata.spikes = zeros(0,2);\n    spikedata.v1 = NaN(N,1);\n    spikedata.v2 = NaN(N,1);\n    spikedata.thres      = -20; % mV - minimum peak value of voltage to record a spike\n    spikedata.dtspikemin =   5; % ms - minimum time between peaks to record a spike\n\n    while step < numsteps\n        \n        t = step*dt;\n        step = step + 1;\n                \n        % update the state variables\n        [x,spikedata] = onestepupdates(t,x,param,dt,Cgaba,Cin,spikedata,inputtype);\n                \n    end % of timestepping loop\n\n    spikes = spikedata.spikes;\n    \n    % raster plot\n    plot(spikes(:,2)/1000,spikes(:,1),'ok')\n    xlabel('time [s]')\n    ylabel('neuron number')\n    axis([0 tf/1000 0 N+1])\nend\n\nfunction [x,spikedata] = onestepupdates(t,x,param,dt,Cgaba,Cin,spikedata,inputtype)\n% updates the scn electrophysiology states variables from t to t + dt\n% t - time at which voltage is defined, all other variables are defined at t-dt/2\n% x - structure of current state variables\n% param - structure of parameters\n% dt - stepsize\n% Cgaba - connection matrix for the gaba network\n% Cin - connection matrix for the input\n% the gating variables, calcium variables, and v 'leapfrog'\n% start: v is defined at t, gates, and calcium at t-dt/2\n% end: v at t+dt, gates and calcium at t+dt/2\n    \n    % evaluate expressions for gating dynamics\n    % assuming v and Cas are fixed\n    qinf = [1.0./(1.0+exp(-(x.v+35.2)/8.1)), 1.0./(1.0+exp((x.v+62.0)/2.0)), 1.0./(1.0+exp((x.v-14.0)/(-17.0))).^0.25, 1.0./(1.0+exp(-(x.v+36.0)/5.1)), 1.0./(1.0+exp(-(x.v+21.6)/6.7)), 1.0./(1.0+exp((x.v+260.0)/65.0)), 1e7*x.ca(:,1).^2./(1e7*x.ca(:,1).^2+5.6)];\n    tauq = [exp(-(x.v+286.0)/160.0), 0.51+exp(-(x.v+26.6)/7.1), exp(-(x.v-67.0)/68.0), param.taurl, param.taurnl, exp(-(x.v-444.0)/220.0), 500.0./(1e7*x.ca(:,1).^2+5.6)];\n        \n\t% update gating variables, except s\n    qold = x.q;\n    x.q(:,1:6) = ( 2.0*dt*qinf(:,1:6) + (2.0*tauq(:,1:6)-dt).*x.q(:,1:6) ) ./ (2.0*tauq(:,1:6)+dt);\n    \n\t% update Cas (solve a quadratic equation)\n    % before s and cac (since they depend on Cas)\n    casold = x.ca(:,1);\n    \n    expr = -param.kca(:,1).*(param.gcal.*qold(:,4).*param.K1./(param.K2+x.ca(:,1))+param.gcanl.*qold(:,5).*qold(:,6)).*(x.v-param.Eca) - x.ca(:,1)./param.tauca(:,1) + param.bca(:,1);\n    B = ( param.K2 - x.ca(:,1) - dt/2*expr + dt/2*param.kca(:,1).*param.gcanl.*x.q(:,5).*x.q(:,6).*(x.v-param.Eca) + dt/2./param.tauca(:,1).*param.K2 - param.bca(:,1)*dt/2 ) ./ (1+dt/2./param.tauca(:,1));\n    C = (-param.K2.*x.ca(:,1) - dt/2*param.K2.*expr + dt/2*param.kca(:,1).*param.gcal.*x.q(:,4).*param.K1.*(x.v-param.Eca)+dt/2*param.kca(:,1).*param.gcanl.*x.q(:,5).*x.q(:,6).*(x.v-param.Eca).*param.K2 - dt/2*param.bca(:,1).*param.K2 ) ./ (1+dt/2./param.tauca(:,1));\n    x.ca(:,1) = (sqrt(B.^2-4*C)-B)/2;\n    \n    % update s\n    ca2 = 1e7*x.ca(:,1).^2;\n    sinf = 1./(1+5.6./ca2);\n\ttaus = 500.0./(ca2+5.6);\n\tx.q(:,7)= ( x.q(:,7).*(1.0-dt./(2.0*tauq(:,7)))+dt/2.0*(qinf(:,7)./tauq(:,7)+sinf./taus) )./(1.0+dt./(2.0*taus));\n    \n    % update Cac\n    x.ca(:,2) = (   x.ca(:,2).*(1.0-dt./(2.0*param.tauca(:,2))) + param.bca(:,2)*dt - dt*param.kca(:,2)/2.0.*( param.gcal.*x.q(:,4).*(param.K1./(param.K2+x.ca(:,1)))+param.gcanl.*x.q(:,5).*x.q(:,6)+param.gcal.*qold(:,4).*(param.K1./(param.K2+casold))+param.gcanl.*qold(:,5).*qold(:,6) ).*(x.v-param.Eca)   )./(1.0+dt./(2.0*param.tauca(:,2)));\n\n    % update the gaba gating variable\n    T = param.Tmax ./ ( 1+exp(-(x.v-param.Vt)./param.Kp) );\n    R = param.ar.*T+param.ad;\n\n    x.y = ( (2.0-dt*R).*x.y + 2*dt*param.ar.*T )./(2.0+dt*R);\n    \n    % compute the total conductance\n    ggaba = param.ggabamax.*(Cgaba*x.y);\n    \n    % compute the total conductances\n    gna = param.gna.*x.q(:,1).*x.q(:,1).*x.q(:,1).*x.q(:,2);\n    gk = param.gk.*x.q(:,3).*x.q(:,3).*x.q(:,3).*x.q(:,3);\n    gkca = param.gkca.*x.q(:,7).*x.q(:,7);\n    gcal = param.gcal.*x.q(:,4).*(param.K1./(param.K2+x.ca(:,1)));\n    gcanl = param.gcanl.*x.q(:,5).*x.q(:,6);\n\n\t% update the voltage\n    G   = gna + gk + gcal + gcanl + gkca + param.gkleak + param.gnaleak + ggaba;\n    I0  = param.Ena.*( gna+param.gnaleak ) + param.Ek.*( gk+gkca+param.gkleak ) + param.Eca.*( gcal+gcanl ) + param.Egaba.*ggaba;\n    Iin = computeinput( t + dt/2, Cin, param, inputtype );\n    x.v = ( dt*(param.Iapp+Iin+I0) + (param.Cm-dt/2.0*G).*x.v )./( param.Cm+dt/2.0*G );\n    \n    % detect spike\n    a = ( x.v-2*spikedata.v1+spikedata.v2)/(2*dt*dt);\n    b = (-x.v+4*spikedata.v1-3*spikedata.v2)/(2*dt);\n    text = t-dt-b./a/2;\n    val = a.*(text-t+dt).*(text-t+dt) + b.*(text-t+dt) + spikedata.v2;\n    spikedata.v2 = spikedata.v1;\n    spikedata.v1 = x.v;\n    \n    ind = 1:numel(x.v);\n    ind = ind( t-dt < text & text < t+dt & ( isnan(spikedata.tlast) | text>(spikedata.tlast+spikedata.dtspikemin) ) & val > spikedata.thres );\n    for ii = ind\n        spikedata.spikes = [spikedata.spikes;ii,text(ii)];\n        spikedata.tlast(ii) = text(ii);\n    end\n    \nend\n\nfunction Iin = computeinput( t, Cin, param, inputtype )\n% returns the current input to the SCN neurons at time t\n\n    [N,M] = size(Cin);\n    sqM = sqrt(M);\n    input = zeros(sqM);\n    \n    gridpoints = (0.5:sqM)/sqM;\n    [X,Y] = meshgrid( gridpoints, gridpoints ); % the centers of the pixels\n    \n    if inputtype == 0 % full field flash\n        \n        % 5 sec off, 5 sec on, 5 sec off\n        Toff1 = 5000; Ton  = 5000; Toff2 = 5000;\n        T = Ton + Toff1 + Toff2;\n        tm = (t - floor(t/T)*T);\n        if ( Toff1 < tm && tm < Toff1+Ton ) \n            input = 1+input;\n        end        \n        \n    elseif inputtype == 1 || inputtype == -1 % bar\n        \n        P = 250; % duration of the bar presentation\n        toppixel = [46,42,2,54,34,3,17,69,13,58,19,55,67,61,36,29,63,35,18,65,20,68,31,4,51,12,59,39,44,7,16,48,21,23,49,47,53,57,25,22,5,11,70,43,60,14,27,1,6,37,32,41,30,33,0,9,56,62,66,50,15,40,52,8,38,24,45,64,26,28,10]/76;\n        tind = 1+mod(floor(t/(2*P)),length(toppixel));\n        wid = ceil(6/76*sqM); % width of the bar\n        ind = 1+floor(toppixel(tind)*sqM);\n        if mod(floor(t/P),2)==0 % on for 250ms, off for 250ms\n            if inputtype == 1\n                % vertical bar\n                input( ind:(ind+wid-1) , : ) = 1;\n            else\n                % horizontal bar\n                input( :, ind:(ind+wid-1) ) = 1;\n            end\n        end\n    end\n    \n    % scale the input on [0,1] to the units of current\n    Iin = (param.iF-param.iA) .* ( Cin*input(:) ) + param.iA;\n    \nend\n\nfunction param = defaultparameters()\n% default ephys parameters\n\n    % physical parameters\n    param.Cm        = 5.7;                  % pF                    membrane capacitance per unit area\n    param.gna       = 229;                  % nS                    Na+ conductance per unit area\n    param.gnaleak   = 0.0576;               % nS                    Na+ leak conductance per unit area\n    param.gk        = 3;                    % nS                    K+ conductance per unit area\n    param.gkleak    = 0.0333;               % nS                    K+ leak conductance per unit area\n    param.gcal      = 6;                    % nS                    Ca++ conductance per unit area for L-type channel\n    param.gcanl     = 20;                   % nS                    Ca++ conductance per unit area for non L-type channel\n    param.gkca      = 100;                  % nS                    Ca++ activated K+ current\n    param.Ena       = 45;                   % mV                    equilibrium potential for Na+\n    param.Ek        = -97;                  % mV                    equilibrium potential for K+\n    param.Eca       = 54;                   % mV                    equilibrium potential for K+\n    param.K1        = 3.93*1e-5;            % mM                    parameter for the value of fL\n    param.K2        = 6.55*1e-4;            % mM                    parameter for the value of fL\n    param.kca       = [1.65e-4, 8.59e-9];   % mM / fC               calcium current to concentration conversion factor\n    param.tauca     = [0.1,1.75e3];         % ms                    calcium clearance time constant\n    param.bca       = [5.425e-4, 3.1e-8];   % mM / ms \n    param.Iapp      = 0;                    % pA                    constant applied current into the cell\n    param.ar        = 5;                    % 1 / mM / ms           activation rate of the gaba synapse\n    param.ad        = 0.18;                 % 1 / ms                de-activation rate of the gaba synapse\n    param.Tmax      = 1;                    % mM                    maximum neurotransmitter in the gaba synapse\n    param.Vt        = -20;                  % mV                    neurontransmitter threshold\n    param.Kp        = 3;                    % mV                    neurontransmitter activation rate\n    param.taurl     = 3.1;                  % ms                    time constant for the rl gate\n    param.taurnl    = 3.1;                  % ms                    time constant for the rnl gate\n    param.ggabamax  = 0.6;                  % nS                    max conductance of gaba synaptic inputs\n    param.Egaba     = -80;                  % mV                    gaba synapse reversal potential\n    param.iF        = 10;                   % pA                    maximum input current (full)\n    param.iA        =  0;                   % pA                    background input current (ambient)\n    param.CT        = 14.6;                 % hr                    circadian time, the mean of the times of the experiments\n    \n    param = setcircadiantime(param);\n\nend\n\nfunction param = setcircadiantime(param)\n% sets the ephys parameters gkca and gkleak\n\n    % pre-computed values (CT,gkca,gkleak)\n    X=[0.00000000 87.64196088 0.08650703; 0.28717949 69.46008967 0.06814150; 0.58021978 53.48868503 0.05200877;\n    0.87326007 40.59755923 0.03898743; 1.16630037 30.67790598 0.02896758; 1.45934066 23.29286765 0.02150795;\n    1.75238095 17.90764710 0.01606833; 2.04542125 14.02490751 0.01214637; 2.33846154 11.23854569 0.00933186;\n    2.63150183 9.24010177 0.00731323; 2.92454212 7.80501806 0.00586365; 3.21758242 6.77392888 0.00482215;\n    3.51062271 6.03555354 0.00407632; 3.80366300 5.51319319 0.00354868; 4.09670330 5.15486316 0.00318673;\n    4.38974359 4.92645389 0.00295601; 4.68278388 4.80724370 0.00283560; 4.97582418 4.78722721 0.00281538;\n    5.26886447 4.86591347 0.00289486; 5.56190476 5.05244686 0.00308328; 5.85494505 5.36709760 0.00340111;\n    6.14798535 5.84437518 0.00388321; 6.44102564 6.53823867 0.00458408; 6.73406593 7.53009911 0.00558596;\n    7.02710623 8.94044754 0.00701055; 7.32014652 10.94475317 0.00903510; 7.61318681 13.79319424 0.01191232;\n    7.90622711 17.83070360 0.01599061; 8.19926740 23.50700497 0.02172425; 8.49230769 31.35458278 0.02965109;\n    8.78534799 41.89946789 0.04030249; 9.07838828 55.47218441 0.05401231; 9.37142857 71.93822724 0.07064467;\n    9.66446886 90.48177832 0.08937553; 9.95750916 109.66201402 0.10874951; 10.25054945 127.83742991 0.12710852;\n    10.54358974 143.73285326 0.14316450; 10.83663004 156.76131430 0.15632456; 11.12967033 166.95754344 0.16662378;\n    11.42271062 174.70983174 0.17445438; 11.71575092 180.51502490 0.18031821; 12.00879121 184.83887735 0.18468573;\n    12.30183150 188.06342575 0.18794285; 12.59487179 190.48142125 0.19038527; 12.88791209 192.30934315 0.19223166;\n    13.18095238 193.70446539 0.19364087; 13.47399267 194.78027469 0.19472755; 13.76703297 195.61862848 0.19557437;\n    14.06007326 196.27878962 0.19624120; 14.35311355 196.80392679 0.19677164; 14.64615385 197.22572579 0.19719770;\n    14.93919414 197.56764003 0.19754307; 15.23223443 197.84717946 0.19782543; 15.52527473 198.07753093 0.19805811;\n    15.81831502 198.26870647 0.19825122; 16.11135531 198.42836231 0.19841249; 16.40439560 198.56238881 0.19854787;\n    16.69743590 198.67532497 0.19866194; 16.99047619 198.77065581 0.19875824; 17.28351648 198.85100765 0.19883940;\n    17.57655678 198.91824471 0.19890732; 17.86959707 198.97344542 0.19896308; 18.16263736 199.01667095 0.19900674;\n    18.45567766 199.04618442 0.19903655; 18.74871795 199.05656634 0.19904704; 19.04175824 199.03467479 0.19902492;\n    19.33479853 198.95936443 0.19894885; 19.62783883 198.80444823 0.19879237; 19.92087912 198.54153063 0.19852680;\n    20.21391941 198.12142481 0.19810245; 20.50695971 197.47845528 0.19745299; 20.80000000 196.50094803 0.19646560;\n    21.09304029 195.02428011 0.19497402; 21.38608059 192.80663103 0.19273397; 21.67912088 189.50552139 0.18939952;\n    21.97216117 184.65992618 0.18450498; 22.26520147 177.69905590 0.17747379; 22.55824176 168.01510880 0.16769203;\n    22.85128205 155.13927121 0.15468613; 23.14432234 139.01713565 0.13840115; 23.43736264 120.27176544 0.11946643;\n    23.73040293 100.23838389 0.09923069;24.00000000 82.14208394 0.08095160];\n\n    param.gkca = interp1( X(:,1),X(:,2), param.CT(:));\n    param.gkleak = interp1( X(:,1),X(:,3), param.CT(:));\nend\n\nfunction x = defaultic()\n% returns the default initial condition and a coefficient of variation\n% over the population\n\n    % v,q,ca on limit cycle\n    % y at steady value\n    x.v  = -81.4;\n    x.q  = [0.0033, 0.0297, 0.2655, 0.0002, 0.0002, 0.0551, 0.0651]; % m, h, n, rl, rnl, fnl, s\n    x.ca = [5.485e-5, 1e-4]; % cas, cac\n    x.y  = 3.59e-8; % synapse variable\n    \nend\n"
        ],
        "variables": [
            "presentation",
            "simulation",
            "L",
            "experimental",
            "returns",
            "the",
            "more",
            "voltage",
            "sparse",
            "CT",
            "floor",
            "while",
            "updates",
            "parameter",
            "sinf",
            "Tmax",
            "step",
            "experiments",
            "current",
            "UniformOutput",
            "bar",
            "equation",
            "ca2",
            "Iapp",
            "thres",
            "per",
            "B",
            "defaultparameters",
            "an",
            "limit",
            "range",
            "CTstd",
            "v",
            "spike",
            "t",
            "variation",
            "T",
            "x",
            "b",
            "param",
            "concentration",
            "function",
            "reversal",
            "computed",
            "Cac",
            "GABA",
            "perfect",
            "spikethres",
            "y",
            "quadratic",
            "gna",
            "Ca",
            "are",
            "gridpoints",
            "rnl",
            "state",
            "hr",
            "v1",
            "voltages",
            "ar",
            "false",
            "axis",
            "G",
            "Eca",
            "centers",
            "qold",
            "number",
            "gating",
            "electrophysiology",
            "tind",
            "select",
            "gcal",
            "numel",
            "Replace",
            "mod",
            "v2",
            "pixel",
            "length",
            "potentials",
            "bars",
            "numsteps",
            "in",
            "membrane",
            "average",
            "Cm",
            "loop",
            "since",
            "s",
            "ii",
            "spikes",
            "value",
            "time",
            "off",
            "uniform",
            "rand",
            "R",
            "pF",
            "detection",
            "I0",
            "maximum",
            "ones",
            "synaptic",
            "setcircadiantime",
            "xlabel",
            "compute",
            "neurotransmitter",
            "dtspikemin",
            "if",
            "neurontransmitter",
            "inputtype",
            "scale",
            "clearance",
            "X",
            "that",
            "population",
            "sets",
            "channel",
            "parameters",
            "calcium",
            "exp",
            "multiple",
            "update",
            "isnan",
            "equilibrium",
            "defaultic",
            "ind",
            "default",
            "on",
            "desynchronize",
            "record",
            "expand",
            "solve",
            "iA",
            "values",
            "K2",
            "have",
            "generate",
            "C",
            "square",
            "NaN",
            "expr",
            "flash",
            "gk",
            "fraction",
            "timestepping",
            "for",
            "kca",
            "zeros",
            "K1",
            "leak",
            "threshold",
            "taurnl",
            "replacement",
            "states",
            "Cin",
            "gaba_conn_prob",
            "no",
            "plot",
            "cell",
            "gaba",
            "factor",
            "except",
            "of",
            "inputs",
            "sqrt",
            "applied",
            "taurl",
            "between",
            "Egaba",
            "other",
            "onestepupdates",
            "tauq",
            "rate",
            "ca",
            "area",
            "ad",
            "at",
            "circadian",
            "else",
            "mM",
            "structfun",
            "final",
            "ylabel",
            "depend",
            "end",
            "standard",
            "evaluate",
            "tlast",
            "variable",
            "de",
            "Kp",
            "datasample",
            "matrix",
            "casold",
            "unit",
            "physical",
            "minimum",
            "and",
            "Toff1",
            "randn",
            "sprand",
            "bca",
            "max",
            "timestep",
            "ephys",
            "gcanl",
            "cells",
            "n_out",
            "P",
            "cac",
            "constant",
            "non",
            "coefficient",
            "field",
            "connectivities",
            "neurons",
            "exgabafrac",
            "Cgaba",
            "start",
            "Iin",
            "condition",
            "expressions",
            "fixed",
            "ggaba",
            "Egabaex",
            "deviation",
            "be",
            "leapfrog",
            "pixels",
            "fL",
            "synapse",
            "elseif",
            "tf",
            "computeinput",
            "peak",
            "gates",
            "M1",
            "SCN",
            "gkleak",
            "to",
            "into",
            "input",
            "structure",
            "peaks",
            "over",
            "Y",
            "defined",
            "gnaleak",
            "density",
            "rl",
            "K",
            "activation",
            "qinf",
            "activated",
            "Na",
            "gkca",
            "dynamics",
            "connection",
            "setup",
            "cycle",
            "total",
            "nS",
            "dt",
            "conversion",
            "sec",
            "scn",
            "spikedata",
            "fC",
            "full",
            "gate",
            "num_pixel_to_scn",
            "Toff2",
            "response",
            "cas",
            "connections",
            "type",
            "excitatory",
            "with",
            "taus",
            "SCNephyssimulation",
            "must",
            "steady",
            "potential",
            "inhibitory",
            "m_in",
            "repmat",
            "account",
            "neuron",
            "light",
            "tm",
            "ggabamax",
            "h",
            "a",
            "toppixel",
            "interp1",
            "wid",
            "fnl",
            "n",
            "perturb",
            "sqM",
            "before",
            "variables",
            "Ek",
            "Ton",
            "Cas",
            "meshgrid",
            "duration",
            "each",
            "they",
            "tauca",
            "m",
            "ms",
            "mean",
            "horizontal",
            "N",
            "mV",
            "Vt",
            "units",
            "stepsize",
            "ipRGC",
            "ceil",
            "from",
            "detect",
            "ambient",
            "introduce",
            "raster",
            "ok",
            "network",
            "M",
            "conductance",
            "capacitance",
            "round",
            "val",
            "is",
            "which",
            "assuming",
            "conductances",
            "width",
            "perturbation",
            "text",
            "numerical",
            "all",
            "heterogeneity",
            "Egabain",
            "randperm",
            "size",
            "pA",
            "q",
            "times",
            "vertical",
            "background",
            "pre",
            "within",
            "iF",
            "pertV",
            "Ena",
            "initial"
        ]
    }
}