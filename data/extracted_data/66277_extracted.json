{
    "trap_and_handle_fpe.c": {
        "comments": [
            "/* from web example: static void __attribute__ ((constructor)) */",
            "/* Enable some exceptions.  At startup all exceptions are masked.  */",
            "/* compile and link with\n\ngcc -o libtrapfpe.a trapfpe.c\nand then use it by adding -trapfpe to the g77 command line when linking */",
            "// more excerpts from hoc.c\n\nexecerror(s, t)\t/* recover from run-time error */\n\tchar *s, *t;\n{\n\textern int hoc_in_yyparse;\n\thoc_in_yyparse = 0;\n\tyystart = 1;\n      \thoc_menu_cleanup();\n\thoc_errno_check();\n#if 0\n\thoc_xmenu_cleanup();\n#endif\n\tif (debug_message_ || hoc_execerror_messages) {\n\t\twarning(s, t);\n\t\tframe_debug();\n#if defined(__GO32__)\n\t\t{extern int egagrph;\n\t\tif (egagrph) {\n\t\t\thoc_outtext(\"Error:\");\n\t\t\thoc_outtext(s);\n\t\t\tif (t) {\n\t\t\t\thoc_outtext(\" \");\n\t\t\t\thoc_outtext(t);\n\t\t\t}\n\t\t\thoc_outtext(\"\\n\");\n\t\t}}\n#endif\n\t}\n\tif (oc_jump_target_) {\n\t\t(*oc_jump_target_)();\n\t}\n\tif (nrnmpi_numprocs &gt; 1) {\n\t\tnrnmpi_abort(-1);\n\t}\n\thoc_execerror_messages = 1;\n\tif (pipeflag == 0)\n\t\tIGNORE(fseek(fin, 0L, 2));\t/* flush rest of file */\n\thoc_oop_initaftererror();\n\tif (hoc_oc_jmpbuf) {\n\t\tlongjmp(hoc_oc_begin, 1);\n\t}\n\tlongjmp(begin, 1);\n}\n\nSIG_RETURN_TYPE\nonintr(sig) int sig;\t/* catch interrupt */\n{\n\t/*ARGSUSED*/\n\tstoprun = 1;\n\tif (intset++)\n\t\texecerror(\"interrupted\", (char *) 0);\n\tIGNORE(signal(SIGINT, onintr));\n}\n\nstatic int coredump;\n\nhoc_coredump_on_error() {\n\tcoredump = 1;\n\tret();\n\tpushx(1.);\n}\n\nint matherr1() {\n\t/* above gives the signal but for some reason fegetexcept returns 0 */\n\tswitch(fegetexcept()) {\n\tcase FE_DIVBYZERO:\n\t\tfprintf(stderr, \"Floating exception: Divide by zero\\n\");\n\t\tbreak;\n\tcase FE_INVALID:\n\t\tfprintf(stderr, \"Floating exception: Invalid (no well defined result\\n\");\n\t\tbreak;\n\tcase FE_OVERFLOW:\n\t\tfprintf(stderr, \"Floating exception: Overflow\\n\");\n\t\tbreak;\n\t}\n}\n\nSIG_RETURN_TYPE\nfpecatch(sig) int sig;\t/* catch floating point exceptions */\n{\n#if NRN_FLOAT_EXCEPTION &amp;&amp; linux\n\tmatherr1();\n#endif\n\tif (coredump) {\n\t\tabort();\n\t}\n\tsignal(SIGFPE, fpecatch);\n\texecerror(\"floating point exception\", (char *) 0);\n}\n\n#if HAS_SIGSEGV\nSIG_RETURN_TYPE\nsigsegvcatch(sig) int sig;\t/* segmentation violation probably due to arg type error */\n{\n\t/*ARGSUSED*/\n\tif (coredump) {\n\t\tabort();\n\t}\n\texecerror(\"Segmentation violation\", \"See $NEURONHOME/lib/help/oc.help\");\n}\n#endif\n\n#if HAS_SIGBUS\nSIG_RETURN_TYPE\nsigbuscatch(sig) int sig;\n{\n\t/*ARGSUSED*/\n\tif (coredump) {\n\t\tabort();\n\t}\n\texecerror(\"Bus error\", \"See $NEURONHOME/lib/help/oc.help\");\n}\n#endif\n\n"
        ],
        "variables": [
            "debug_message_",
            "of",
            "gives",
            "amp",
            "hoc_xmenu_cleanup",
            "floating",
            "nrnmpi_abort",
            "trapfpe_",
            "help",
            "error",
            "__GO32__",
            "returns",
            "Segmentation",
            "char",
            "hoc_coredump_on_error",
            "Divide",
            "sigbuscatch",
            "__attribute__",
            "the",
            "example",
            "fin",
            "fprintf",
            "more",
            "yystart",
            "hoc_oop_initaftererror",
            "s",
            "recover",
            "rest",
            "type",
            "with",
            "line",
            "some",
            "well",
            "HAS_SIGSEGV",
            "Bus",
            "catch",
            "fseek",
            "time",
            "endif",
            "masked",
            "hoc_outtext",
            "begin",
            "fpecatch",
            "NEURONHOME",
            "include",
            "interrupt",
            "See",
            "gt",
            "ret",
            "use",
            "neuron",
            "feenableexcept",
            "point",
            "At",
            "and",
            "oc",
            "ARGSUSED",
            "h",
            "fenv",
            "a",
            "hoc_oc_begin",
            "if",
            "SIGFPE",
            "excerpts",
            "pipeflag",
            "n",
            "break",
            "probably",
            "SIGINT",
            "static",
            "switch",
            "then",
            "f2c",
            "case",
            "define",
            "FE_DIVBYZERO",
            "coredump",
            "scopmath",
            "flush",
            "reason",
            "hoc_menu_cleanup",
            "c",
            "HAS_SIGBUS",
            "NRN_FLOAT_EXCEPTION",
            "hoc_in_yyparse",
            "hoc_errno_check",
            "extern",
            "frame_debug",
            "t",
            "SIG_RETURN_TYPE",
            "startup",
            "web",
            "command",
            "hoc",
            "Floating",
            "Overflow",
            "exception",
            "FE_INVALID",
            "Invalid",
            "file",
            "hoc_oc_jmpbuf",
            "sig",
            "Enable",
            "libtrapfpe",
            "linux",
            "egagrph",
            "abort",
            "g77",
            "sigsegvcatch",
            "home",
            "exceptions",
            "compile",
            "FE_OVERFLOW",
            "from",
            "nrnmpi_numprocs",
            "adding",
            "onintr",
            "o",
            "but",
            "execerror",
            "Error",
            "gcc",
            "stderr",
            "are",
            "result",
            "link",
            "hoc_execerror_messages",
            "run",
            "all",
            "arg",
            "for",
            "matherr1",
            "stoprun",
            "int",
            "by",
            "_GNU_SOURCE",
            "pushx",
            "to",
            "oc_jump_target_",
            "linking",
            "due",
            "trapfpe",
            "longjmp",
            "IGNORE",
            "intset",
            "signal",
            "void",
            "defined",
            "warning",
            "it",
            "nrn",
            "interrupted",
            "no",
            "when",
            "zero",
            "above",
            "segmentation",
            "src",
            "violation",
            "lib",
            "constructor",
            "hines",
            "fegetexcept"
        ]
    },
    "trapfpe.c": {
        "comments": [
            "/* from web example: static void __attribute__ ((constructor)) */",
            "/* Enable some exceptions.  At startup all exceptions are masked.  */",
            "/* compile and link with\n\ngcc -o libtrapfpe.a trapfpe.c\nand then use it by adding -trapfpe to the g77 command line when linking */"
        ],
        "variables": [
            "use",
            "link",
            "startup",
            "web",
            "neuron",
            "feenableexcept",
            "command",
            "trapfpe_",
            "At",
            "FE_INVALID",
            "all",
            "and",
            "Enable",
            "h",
            "fenv",
            "libtrapfpe",
            "a",
            "int",
            "by",
            "_GNU_SOURCE",
            "__attribute__",
            "example",
            "to",
            "the",
            "g77",
            "linking",
            "home",
            "exceptions",
            "trapfpe",
            "compile",
            "FE_OVERFLOW",
            "static",
            "from",
            "void",
            "with",
            "then",
            "f2c",
            "some",
            "adding",
            "line",
            "define",
            "FE_DIVBYZERO",
            "scopmath",
            "o",
            "masked",
            "it",
            "nrn",
            "gcc",
            "c",
            "when",
            "src",
            "include",
            "are",
            "constructor",
            "hines"
        ]
    },
    "readme.txt": {
        "comments": [
            "Readme for the model associated with the paper\n\nTraub RD, Contreras D, Cunningham MO, Murray H, Lebeau FE, Roopun A, \nBibbig A, Wilent WB, Higley M, Whittington MA.\nA single-column thalamocortical network model exhibiting gamma \noscillations, sleep spindles and epileptogenic bursts.\nJ Neurophysiol. 2004 Nov 3; [Epub ahead of print]\n\nThis port of the original ifc code to the gnu g77 fortran compiler was\nimplemented by Tom Morse and Michael Hines in collaboration with Roger\nTraub.  To run these files first build the executable by typing \nmake\nin the port2g77 directory.  Finally, type \n./job1 &\n\nto start the job on the machines in the cluster indicated in the\ncolossusnodes file.  (assuming you have an implementation of mpi).\n\n(groucho.f = main program)\n\n",
            ""
        ],
        "variables": [
            "of",
            "fortran",
            "in",
            "sleep",
            "This",
            "Higley",
            "Cunningham",
            "paper",
            "the",
            "Contreras",
            "Murray",
            "print",
            "MA",
            "type",
            "with",
            "indicated",
            "column",
            "WB",
            "groucho",
            "implemented",
            "Traub",
            "Tom",
            "Whittington",
            "compiler",
            "main",
            "Michael",
            "directory",
            "and",
            "files",
            "H",
            "you",
            "typing",
            "oscillations",
            "Neurophysiol",
            "spindles",
            "was",
            "Morse",
            "J",
            "port",
            "an",
            "gnu",
            "bursts",
            "file",
            "single",
            "Lebeau",
            "MO",
            "first",
            "start",
            "mpi",
            "implementation",
            "ahead",
            "on",
            "g77",
            "model",
            "Nov",
            "these",
            "colossusnodes",
            "Readme",
            "program",
            "network",
            "M",
            "collaboration",
            "A",
            "Roopun",
            "FE",
            "assuming",
            "exhibiting",
            "code",
            "have",
            "To",
            "D",
            "run",
            "Bibbig",
            "for",
            "port2g77",
            "machines",
            "by",
            "Wilent",
            "job1",
            "to",
            "associated",
            "make",
            "job",
            "thalamocortical",
            "Epub",
            "ifc",
            "Hines",
            "f",
            "original",
            "gamma",
            "build",
            "cluster",
            "Finally",
            "epileptogenic",
            "executable",
            "Roger",
            "RD"
        ]
    }
}